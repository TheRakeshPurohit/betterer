(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{101:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return b})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return l}));var n=r(3),a=r(7),o=(r(0),r(115)),i={id:"config",title:"Betterer Configuration",sidebar_label:"Betterer Configuration",slug:"/config"},b={unversionedId:"api/config",id:"api/config",isDocsHomePage:!1,title:"Betterer Configuration",description:"Betterer options",source:"@site/docs/api/config.md",slug:"/config",permalink:"/betterer/docs/config",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/config.md",version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1614393388,sidebar_label:"Betterer Configuration",sidebar:"api",previous:{title:"Betterer API",permalink:"/betterer/docs/api"},next:{title:"Betterer Context",permalink:"/betterer/docs/context"}},c=[{value:"Betterer options",id:"betterer-options",children:[{value:"Base options",id:"base-options",children:[]},{value:"<code>BettererOptionsRunner</code>",id:"bettereroptionsrunner",children:[]},{value:"<code>BettererOptionsStart</code>",id:"bettereroptionsstart",children:[]},{value:"<code>BettererOptionsWatch</code>",id:"bettereroptionswatch",children:[]}]},{value:"<code>BettererConfig</code>",id:"bettererconfig",children:[]},{value:"<code>BettererConfigFilters</code>",id:"bettererconfigfilters",children:[]},{value:"<code>BettererConfigIgnores</code>",id:"bettererconfigignores",children:[]},{value:"<code>BettererConfigPaths</code>",id:"bettererconfigpaths",children:[]},{value:"<code>BettererConfigReporter</code>",id:"bettererconfigreporter",children:[]},{value:"<code>BettererConfigReporters</code>",id:"bettererconfigreporters",children:[]}],p={toc:c};function l(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"betterer-options"},"Betterer options"),Object(o.b)("p",null,"Whenever you run ",Object(o.b)("strong",{parentName:"p"},"Betterer")," (from the ",Object(o.b)("a",{parentName:"p",href:"./running-betterer"},"CLI")," or via the ",Object(o.b)("a",{parentName:"p",href:"./api"},"JS API"),") you can pass an options object. It will be validated by ",Object(o.b)("strong",{parentName:"p"},"Betterer")," and turned into a ",Object(o.b)("a",{parentName:"p",href:"#bettererconfig"},Object(o.b)("inlineCode",{parentName:"a"},"BettererConfig")),"."),Object(o.b)("h3",{id:"base-options"},"Base options"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererOptionsBase = Partial<{\n  configPaths: BettererConfigPaths | string;\n  cwd: string;\n  filters: ReadonlyArray<string | RegExp> | string;\n  reporters: BettererConfigReporters;\n  resultsPath: string;\n  silent: boolean;\n  tsconfigPath: string;\n}>;\n")),Object(o.b)("h4",{id:"configpaths-bettererconfigpaths--string-default-bettererts"},Object(o.b)("inlineCode",{parentName:"h4"},"configPaths"),": ",Object(o.b)("a",{parentName:"h4",href:"#bettererconfigpaths"},Object(o.b)("inlineCode",{parentName:"a"},"BettererConfigPaths"))," | ",Object(o.b)("inlineCode",{parentName:"h4"},"string")," (default: ",Object(o.b)("inlineCode",{parentName:"h4"},"['./.betterer.ts]"),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The list of ",Object(o.b)("a",{parentName:"p",href:"./test-definition-file"},"test definition file paths")," containing ",Object(o.b)("strong",{parentName:"p"},"Betterer")," tests for the current run.")),Object(o.b)("h4",{id:"cwd-string-default-processcwd"},Object(o.b)("inlineCode",{parentName:"h4"},"cwd"),": ",Object(o.b)("inlineCode",{parentName:"h4"},"string")," (default: ",Object(o.b)("a",{parentName:"h4",href:"https://nodejs.org/api/process.html#process_process_cwd"},Object(o.b)("inlineCode",{parentName:"a"},"process.cwd()")),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The current working directory for the current run.")),Object(o.b)("h4",{id:"filters-readonlyarraystring--regexp--string-default-"},Object(o.b)("inlineCode",{parentName:"h4"},"filters"),": ",Object(o.b)("inlineCode",{parentName:"h4"},"ReadonlyArray<string | RegExp> | string")," (default: ",Object(o.b)("inlineCode",{parentName:"h4"},"[]"),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The list of filters which tests to run for the current run. Will be parsed into ",Object(o.b)("a",{parentName:"p",href:"#bettererconfigfilters"},Object(o.b)("inlineCode",{parentName:"a"},"BettererConfigFilters")),".")),Object(o.b)("h4",{id:"reporters-bettererconfigreporters-default-bettererreporter"},Object(o.b)("inlineCode",{parentName:"h4"},"reporters"),": ",Object(o.b)("a",{parentName:"h4",href:"#bettererconfigreporters"},Object(o.b)("inlineCode",{parentName:"a"},"BettererConfigReporters"))," (default: ",Object(o.b)("inlineCode",{parentName:"h4"},"['@betterer/reporter']"),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The list of ",Object(o.b)("a",{parentName:"p",href:"./reporters"},"reporters")," for the current run.")),Object(o.b)("h4",{id:"resultspath-string-default-bettererresults"},Object(o.b)("inlineCode",{parentName:"h4"},"resultsPath"),": ",Object(o.b)("inlineCode",{parentName:"h4"},"string")," (default: ",Object(o.b)("inlineCode",{parentName:"h4"},"'.betterer.results'"),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The path to the ",Object(o.b)("a",{parentName:"p",href:"./results-file"},"results file")," for the current run.")),Object(o.b)("h4",{id:"silent-boolean-default-true"},Object(o.b)("inlineCode",{parentName:"h4"},"silent"),": ",Object(o.b)("inlineCode",{parentName:"h4"},"boolean")," (default: ",Object(o.b)("inlineCode",{parentName:"h4"},"true"),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"When set to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),", all default reporters will be disabled. Custom reporters will still work normally.")),Object(o.b)("h4",{id:"tsconfigpath-string--null-default-null"},Object(o.b)("inlineCode",{parentName:"h4"},"tsconfigPath"),": ",Object(o.b)("inlineCode",{parentName:"h4"},"string | null")," (default: ",Object(o.b)("inlineCode",{parentName:"h4"},"null"),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The path to the ",Object(o.b)("a",{parentName:"p",href:"./betterer-and-typescript"},"TypeScript configuration")," for the current run.")),Object(o.b)("h3",{id:"bettereroptionsrunner"},Object(o.b)("inlineCode",{parentName:"h3"},"BettererOptionsRunner")),Object(o.b)("p",null,"Options object for creating a ",Object(o.b)("strong",{parentName:"p"},"Betterer")," runner. It will be validated by ",Object(o.b)("strong",{parentName:"p"},"Betterer")," and turned into a ",Object(o.b)("a",{parentName:"p",href:"#bettererconfig"},Object(o.b)("inlineCode",{parentName:"a"},"BettererConfig")),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererOptionsRunner = BettererOptionsBase &\n  Partial<{\n    ignores: BettererConfigIgnores;\n  }>;\n")),Object(o.b)("p",null,"All the ",Object(o.b)("a",{parentName:"p",href:"#base-options"},Object(o.b)("inlineCode",{parentName:"a"},"base options"))," above as well as:"),Object(o.b)("h4",{id:"ignores-bettererconfigignores-default-"},Object(o.b)("inlineCode",{parentName:"h4"},"ignores"),": ",Object(o.b)("a",{parentName:"h4",href:"#bettererconfigignores"},Object(o.b)("inlineCode",{parentName:"a"},"BettererConfigIgnores"))," (default: ",Object(o.b)("inlineCode",{parentName:"h4"},"[]"),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The list of glob patterns to ignore from file watching for the current run.")),Object(o.b)("h3",{id:"bettereroptionsstart"},Object(o.b)("inlineCode",{parentName:"h3"},"BettererOptionsStart")),Object(o.b)("p",null,"Options object for a ",Object(o.b)("strong",{parentName:"p"},"Betterer")," run in default mode. It will be validated by ",Object(o.b)("strong",{parentName:"p"},"Betterer")," and turned into a ",Object(o.b)("a",{parentName:"p",href:"#bettererconfig"},Object(o.b)("inlineCode",{parentName:"a"},"BettererConfig")),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererOptionsStart = BettererOptionsBase &\n  Partial<{\n    ci: boolean;\n    strict: boolean;\n    update: boolean;\n  }>;\n")),Object(o.b)("p",null,"All the ",Object(o.b)("a",{parentName:"p",href:"#base-options"},Object(o.b)("inlineCode",{parentName:"a"},"base options"))," above as well as:"),Object(o.b)("h4",{id:"ci-boolean-default-false"},Object(o.b)("inlineCode",{parentName:"h4"},"ci"),": ",Object(o.b)("inlineCode",{parentName:"h4"},"boolean")," (default: ",Object(o.b)("inlineCode",{parentName:"h4"},"false"),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"When set to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),", ",Object(o.b)("a",{parentName:"p",href:"./running-betterer#ci-mode-run-your-tests-and-throw-on-changes"},"CI mode")," is enabled. In ","[CI mode]"," ",Object(o.b)("strong",{parentName:"p"},"Betterer")," will throw an error if there is any difference between the test results and the expected results.")),Object(o.b)("h4",{id:"strict-boolean-default-false"},Object(o.b)("inlineCode",{parentName:"h4"},"strict"),": ",Object(o.b)("inlineCode",{parentName:"h4"},"boolean")," (default: ",Object(o.b)("inlineCode",{parentName:"h4"},"false"),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"When set to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),", ",Object(o.b)("a",{parentName:"p",href:"./running-betterer#ci-mode-run-your-tests-and-throw-on-changes"},"Strict mode")," is enabled. In ","[strict mode]"," ",Object(o.b)("strong",{parentName:"p"},"Betterer")," will throw an error if there is any difference between the test results and the expected results. Set to ",Object(o.b)("inlineCode",{parentName:"p"},"true")," when ",Object(o.b)("inlineCode",{parentName:"p"},"ci")," is ",Object(o.b)("inlineCode",{parentName:"p"},"true"),".")),Object(o.b)("h4",{id:"update-boolean-default-false"},Object(o.b)("inlineCode",{parentName:"h4"},"update"),": ",Object(o.b)("inlineCode",{parentName:"h4"},"boolean")," (default: ",Object(o.b)("inlineCode",{parentName:"h4"},"false"),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"When set to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),", ",Object(o.b)("strong",{parentName:"p"},"Betterer")," will ",Object(o.b)("a",{parentName:"p",href:"./updating-results"},"update the results file"),", even if things get worse. Set to ",Object(o.b)("inlineCode",{parentName:"p"},"false")," when ",Object(o.b)("inlineCode",{parentName:"p"},"ci")," or ",Object(o.b)("inlineCode",{parentName:"p"},"strict")," are ",Object(o.b)("inlineCode",{parentName:"p"},"true"),".")),Object(o.b)("h3",{id:"bettereroptionswatch"},Object(o.b)("inlineCode",{parentName:"h3"},"BettererOptionsWatch")),Object(o.b)("p",null,"Options object for a ",Object(o.b)("strong",{parentName:"p"},"Betterer")," run in Watch mode. Will be parsed into a ",Object(o.b)("a",{parentName:"p",href:"#bettererconfig"},Object(o.b)("inlineCode",{parentName:"a"},"BettererConfig")),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"export type BettererOptionsWatch = BettererOptionsRunner &\n  Partial<{\n    watch: true;\n  }>;\n")),Object(o.b)("p",null,"All the ",Object(o.b)("a",{parentName:"p",href:"#base-options"},Object(o.b)("inlineCode",{parentName:"a"},"base options"))," above as well as:"),Object(o.b)("h4",{id:"ignores-bettererconfigignores-default--1"},Object(o.b)("inlineCode",{parentName:"h4"},"ignores"),": ",Object(o.b)("a",{parentName:"h4",href:"./config#bettererconfigignores"},Object(o.b)("inlineCode",{parentName:"a"},"BettererConfigIgnores"))," (default: ",Object(o.b)("inlineCode",{parentName:"h4"},"[]"),")"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The list of glob patterns to ignore from file watching for the current run.")),Object(o.b)("h4",{id:"watch-true"},Object(o.b)("inlineCode",{parentName:"h4"},"watch"),": ",Object(o.b)("inlineCode",{parentName:"h4"},"true")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Must be set to ",Object(o.b)("inlineCode",{parentName:"p"},"true")," in ",Object(o.b)("a",{parentName:"p",href:"./running-betterer#watch-mode-run-your-tests-when-files-change"},"Watch mode"),". In ","[Watch mode]"," ",Object(o.b)("strong",{parentName:"p"},"Betterer")," will run your tests any time a file changes.")),Object(o.b)("h2",{id:"bettererconfig"},Object(o.b)("inlineCode",{parentName:"h2"},"BettererConfig")),Object(o.b)("p",null,"A validated configuration object for a ",Object(o.b)("strong",{parentName:"p"},"Betterer")," run:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfig = {\n  ci: boolean;\n  configPaths: BettererConfigPaths;\n  cwd: string;\n  filters: BettererConfigFilters;\n  ignores: BettererConfigIgnores;\n  reporters: BettererConfigReporters;\n  resultsPath: string;\n  silent: boolean;\n  strict: boolean;\n  tsconfigPath: string | null;\n  update: boolean;\n  watch: boolean;\n};\n")),Object(o.b)("h2",{id:"bettererconfigfilters"},Object(o.b)("inlineCode",{parentName:"h2"},"BettererConfigFilters")),Object(o.b)("p",null,"A list of ",Object(o.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"},"regular expressions")," to filter which tests to run."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfigFilters = ReadonlyArray<RegExp>;\n")),Object(o.b)("h2",{id:"bettererconfigignores"},Object(o.b)("inlineCode",{parentName:"h2"},"BettererConfigIgnores")),Object(o.b)("p",null,"A list of ",Object(o.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/glob#glob-primer"},"glob patterns")," to ignore from file watching."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfigIgnores = ReadonlyArray<string>;\n")),Object(o.b)("h2",{id:"bettererconfigpaths"},Object(o.b)("inlineCode",{parentName:"h2"},"BettererConfigPaths")),Object(o.b)("p",null,"A list of ",Object(o.b)("a",{parentName:"p",href:"./test-definition-file"},"test definition file paths")," containing ",Object(o.b)("strong",{parentName:"p"},"Betterer")," tests."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfigPaths = ReadonlyArray<string>;\n")),Object(o.b)("h2",{id:"bettererconfigreporter"},Object(o.b)("inlineCode",{parentName:"h2"},"BettererConfigReporter")),Object(o.b)("p",null,"A path to a module that exports a ",Object(o.b)("a",{parentName:"p",href:"./reporter#bettererreporter"},Object(o.b)("inlineCode",{parentName:"a"},"BettererReporter"))," or an inline ",Object(o.b)("a",{parentName:"p",href:"./reporter#bettererreporter"},Object(o.b)("inlineCode",{parentName:"a"},"BettererReporter")),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfigReporter = string | BettererReporter;\n")),Object(o.b)("h2",{id:"bettererconfigreporters"},Object(o.b)("inlineCode",{parentName:"h2"},"BettererConfigReporters")),Object(o.b)("p",null,"A list of ",Object(o.b)("a",{parentName:"p",href:"#bettererconfigreporter"},Object(o.b)("inlineCode",{parentName:"a"},"BettererConfigReporter")),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfigReporter = ReadonlyArray<BettererConfigReporter>;\n")))}l.isMDXComponent=!0},115:function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return f}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function b(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):b(b({},t),e)),r},s=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=l(r),u=n,f=s["".concat(i,".").concat(u)]||s[u]||d[u]||o;return r?a.a.createElement(f,b(b({ref:t},p),{},{components:r})):a.a.createElement(f,b({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:n,i[1]=b;for(var p=2;p<o;p++)i[p]=r[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);