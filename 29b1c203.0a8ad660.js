(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{118:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var b=a.a.createContext({}),u=function(e){var t=a.a.useContext(b),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=u(r),d=n,m=p["".concat(l,".").concat(d)]||p[d]||s[d]||i;return r?a.a.createElement(m,o(o({ref:t},b),{},{components:r})):a.a.createElement(m,o({ref:t},b))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var b=2;b<i;b++)l[b]=r[b];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},81:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return l})),r.d(t,"metadata",(function(){return o})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return u}));var n=r(3),a=r(7),i=(r(0),r(118)),l={id:"runner",title:"Betterer Runner",sidebar_label:"Betterer Runner",slug:"/runner"},o={unversionedId:"api/runner",id:"api/runner",isDocsHomePage:!1,title:"Betterer Runner",description:"BettererFilePaths",source:"@site/docs/api/runner.md",slug:"/runner",permalink:"/betterer/docs/runner",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/runner.md",version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1614393388,sidebar_label:"Betterer Runner",sidebar:"api",previous:{title:"Betterer Result",permalink:"/betterer/docs/results"},next:{title:"Betterer Test",permalink:"/betterer/docs/betterer-test"}},c=[{value:"<code>BettererFilePaths</code>",id:"bettererfilepaths",children:[]},{value:"<code>BettererRunner</code>",id:"bettererrunner",children:[{value:"Methods",id:"methods",children:[]},{value:"<code>queue()</code>",id:"queue",children:[]},{value:"<code>stop()</code>",id:"stop",children:[]}]},{value:"<code>BettererRunHandler</code>",id:"bettererrunhandler",children:[]}],b={toc:c};function u(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},b,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"bettererfilepaths"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererFilePaths")),Object(i.b)("p",null,"A list of file paths."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererFilePaths = ReadonlyArray<string>;\n")),Object(i.b)("h2",{id:"bettererrunner"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererRunner")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererRunner = {\n  queue(filePaths?: BettererFilePaths, handler?: BettererRunHandler): Promise<void>;\n  stop(force: true): Promise<BettererSummary | null>;\n  stop(): Promise<BettererSummary>;\n};\n")),Object(i.b)("h3",{id:"methods"},"Methods"),Object(i.b)("h3",{id:"queue"},Object(i.b)("inlineCode",{parentName:"h3"},"queue()")),Object(i.b)("p",null,"Queue a ",Object(i.b)("strong",{parentName:"p"},"Betterer")," test run on a given set of files. Multiple calls will be debounced."),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filePaths?"),": ",Object(i.b)("a",{parentName:"li",href:"#bettererfilepaths"},Object(i.b)("inlineCode",{parentName:"a"},"BettererFilePaths"))," - List of files to test with ",Object(i.b)("strong",{parentName:"li"},"Betterer"),". If ",Object(i.b)("inlineCode",{parentName:"li"},"filePaths")," is ",Object(i.b)("inlineCode",{parentName:"li"},"undefined")," then all files will be tested."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"handler?"),": ",Object(i.b)("a",{parentName:"li",href:"#bettererrunhandler"},Object(i.b)("inlineCode",{parentName:"a"},"BettererRunHandler"))," - Callback to run when the queued run is complete.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("inlineCode",{parentName:"p"},"Promise<void>")),Object(i.b)("h3",{id:"stop"},Object(i.b)("inlineCode",{parentName:"h3"},"stop()")),Object(i.b)("p",null,"Stop the runner, and return the most recent ",Object(i.b)("a",{parentName:"p",href:"./context#betterersummary"},Object(i.b)("inlineCode",{parentName:"a"},"BettererSummary"))," (or ",Object(i.b)("inlineCode",{parentName:"p"},"null")," if a run hasn't finished yet`)."),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"force?"),": ",Object(i.b)("inlineCode",{parentName:"li"},"true")," - If ",Object(i.b)("inlineCode",{parentName:"li"},"force")," is passed, the ",Object(i.b)("strong",{parentName:"li"},"Betterer")," run will be stopped and any errors will be ignored.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("a",{parentName:"p",href:"./context#betterersummary"},Object(i.b)("inlineCode",{parentName:"a"},"Promise<BettererSummary>"))),Object(i.b)("h2",{id:"bettererrunhandler"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererRunHandler")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererRunHandler = (summary: BettererSummary) => void;\n")),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"summary"),": ",Object(i.b)("a",{parentName:"li",href:"./context#betterersummary"},Object(i.b)("inlineCode",{parentName:"a"},"BettererSummary"))," - The summary of the completed run.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("inlineCode",{parentName:"p"},"void")))}u.isMDXComponent=!0}}]);