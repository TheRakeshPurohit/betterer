(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{117:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return h}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),c=function(e){var t=a.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},b=function(e){var t=c(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),b=c(r),m=n,h=b["".concat(i,".").concat(m)]||b[m]||u[m]||o;return r?a.a.createElement(h,s(s({ref:t},l),{},{components:r})):a.a.createElement(h,s({ref:t},l))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},99:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"toc",(function(){return p})),r.d(t,"default",(function(){return c}));var n=r(3),a=r(7),o=(r(0),r(117)),i={title:"Improving accessibility with Betterer \u2600\ufe0f",author:"Craig Spence",authorURL:"http://twitter.com/phenomnominal",authorTwitter:"phenomnominal"},s={permalink:"/betterer/blog/2020/05/15/improving-accessibility-with-betterer",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/blog/blog/2020-5-15-improving-accessibility-with-betterer.md",source:"@site/blog/2020-5-15-improving-accessibility-with-betterer.md",description:"So, yesterday I announced the new release of \u2600\ufe0f Betterer, thanks if you've checked it out already!",date:"2020-05-15T00:00:00.000Z",tags:[],title:"Improving accessibility with Betterer \u2600\ufe0f",readingTime:3.74,truncated:!1,prevItem:{title:"Incrementally adding Stylelint rules with Betterer \u2600\ufe0f",permalink:"/betterer/blog/2021/03/01/betterer-and-stylelint"},nextItem:{title:"Betterer v1.0.0 \u2600\ufe0f",permalink:"/betterer/blog/2020/05/14/betterer-v1.0.0"}},p=[{value:"<strong>Betterer</strong> TL;DR",id:"betterer-tldr",children:[]},{value:"Our first <strong>Betterer</strong> test",id:"our-first-betterer-test",children:[{value:"Writing the test",id:"writing-the-test",children:[]},{value:"Writing the constraint",id:"writing-the-constraint",children:[]},{value:"The whole thing",id:"the-whole-thing",children:[]}]},{value:"That&#39;s it!",id:"thats-it",children:[]}],l={toc:p};function c(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"So, yesterday I announced the new release of ",Object(o.b)("a",{parentName:"p",href:"https://dev.to/phenomnominal/betterer-v1-0-0-301b"},"\u2600\ufe0f ",Object(o.b)("strong",{parentName:"a"},"Betterer")),", thanks if you've checked it out already!"),Object(o.b)("p",null,"I wanted to write another post describing a different example, this time with a custom test instead of a built-in test! Let's take a look at how we can prevent accessibility regressions (and hopefully encourage improvements!) \ud83d\udc40"),Object(o.b)("h2",{id:"betterer-tldr"},Object(o.b)("strong",{parentName:"h2"},"Betterer")," TL;DR"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer"},Object(o.b)("strong",{parentName:"a"},"Betterer"))," is a test runner that helps make incremental improvements to your code! It is based upon ",Object(o.b)("a",{parentName:"p",href:"https://jestjs.io/docs/en/snapshot-testing"},Object(o.b)("strong",{parentName:"a"},"Jest"),"'s snapshot testing"),", but with a twist..."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Betterer")," works in two stages. The first time it runs a test, it will take a snapshot of the current state. From that point on, whenever it runs it will compare against that snapshot. It will either throw an error (if the test got worse \u274c), or update the snapshot (if the test got better \u2705). That's pretty much it!"),Object(o.b)("h2",{id:"our-first-betterer-test"},"Our first ",Object(o.b)("strong",{parentName:"h2"},"Betterer")," test"),Object(o.b)("p",null,"Writing a test with ",Object(o.b)("strong",{parentName:"p"},"Betterer")," involves implementing two functions! More formally, we need to implement the ",Object(o.b)("inlineCode",{parentName:"p"},"BettererTest")," type:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererTest<ResultType> = {\n  test: () => ResultType | Promise<ResultType>;\n  constraint: (result: ResultType, expected: ResultType) => ResultType | Promise<ResultType>;\n};\n")),Object(o.b)("p",null,"So we need to write two functions:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"test")," - the action that needs to happen to get a result,"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"constraint")," - the rule to apply to check if the result is ",Object(o.b)("em",{parentName:"li"},"better"),", ",Object(o.b)("em",{parentName:"li"},"worse")," or the ",Object(o.b)("em",{parentName:"li"},"same"))),Object(o.b)("p",null,"We can implement these in their own file, or straight in the ",Object(o.b)("inlineCode",{parentName:"p"},".betterer.ts")," file. To keep it simple, we'll do the latter:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nexport default {\n  'improve accessibility': {\n    test: ...?,\n    constraint: ...?\n  }\n};\n")),Object(o.b)("h3",{id:"writing-the-test"},"Writing the test"),Object(o.b)("p",null,"To implement our test, we're going to use ",Object(o.b)("a",{parentName:"p",href:"https://github.com/puppeteer/puppeteer"},Object(o.b)("strong",{parentName:"a"},"Puppeteer"))," and ",Object(o.b)("a",{parentName:"p",href:"https://github.com/dequelabs/axe-core"},Object(o.b)("strong",{parentName:"a"},"Axe")),". ",Object(o.b)("strong",{parentName:"p"},"Puppeteer")," is a tool that will run a browser and load a page. ",Object(o.b)("strong",{parentName:"p"},"Axe")," is a set of accessibility audits that we can run over a web page. We're also going to use ",Object(o.b)("a",{parentName:"p",href:"https://github.com/dequelabs/axe-puppeteer"},Object(o.b)("strong",{parentName:"a"},"Axe Puppeteer"))," which makes it a bit easier to use ",Object(o.b)("strong",{parentName:"p"},"Axe")," with ",Object(o.b)("strong",{parentName:"p"},"Puppeteer"),"."),Object(o.b)("p",null,"Lucky for us, we can take the example straight from the ",Object(o.b)("strong",{parentName:"p"},"Axe Puppeteer")," documentation! \ud83d\ude0d"),Object(o.b)("p",null,"We launch ",Object(o.b)("strong",{parentName:"p"},"Puppeteer"),", get the ",Object(o.b)("inlineCode",{parentName:"p"},"page")," that it creates for us and navigate to a website. Then we execute ",Object(o.b)("strong",{parentName:"p"},"Axe")," and get the results. Next, we close the page and the browser, before finally returning the number of violations! \ud83e\udd13"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { AxePuppeteer } from 'axe-puppeteer';\nimport * as puppeteer from 'puppeteer';\n\nasync function improveAccessibility() {\n  const browser = await puppeteer.launch();\n  const [page] = await browser.pages();\n\n  await page.goto('https://phenomnomnominal.github.io/betterer');\n  const results = await new AxePuppeteer(page).analyze();\n\n  await page.close();\n  await browser.close();\n\n  return results.violations.length;\n}\n")),Object(o.b)("p",null,"That's our test sorted!"),Object(o.b)("h3",{id:"writing-the-constraint"},"Writing the constraint"),Object(o.b)("p",null,"Now what about the ",Object(o.b)("inlineCode",{parentName:"p"},"constraint"),"? Since our test returns a number, we just need to compare the two results. We want our test to improve when the result is ",Object(o.b)("em",{parentName:"p"},"smaller"),", so the ",Object(o.b)("inlineCode",{parentName:"p"},"constraint")," should look something like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { ConstraintResult } from '@betterer/constraint';\n\nfunction constraint(result: number, expected: number): ConstraintResult {\n  if (current === previous) {\n    return ConstraintResult.same;\n  }\n  if (current < previous) {\n    return ConstraintResult.better;\n  }\n  return ConstraintResult.worse;\n}\n")),Object(o.b)("p",null,"Comparing numbers is fairly common, so we can use the pre-defined ",Object(o.b)("inlineCode",{parentName:"p"},"smaller")," or ",Object(o.b)("inlineCode",{parentName:"p"},"bigger")," constraints:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { smaller } from '@betterer/constraint';\n")),Object(o.b)("p",null,"So I kind of lied, you can write a test with just one function! \ud83d\ude05"),Object(o.b)("h3",{id:"the-whole-thing"},"The whole thing"),Object(o.b)("p",null,"Putting it all together, we have our test:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { smaller } from '@betterer/constraint';\nimport { AxePuppeteer } from 'axe-puppeteer';\nimport * as puppeteer from 'puppeteer';\n\nexport default {\n  'improve accessibility': {\n    async test() {\n      const browser = await puppeteer.launch();\n      const [page] = await browser.pages();\n\n      await page.goto('https://phenomnomnominal.github.io/betterer');\n      const results = await new AxePuppeteer(page).analyze();\n\n      await page.close();\n      await browser.close();\n\n      return results.violations.length;\n    },\n    constraint: smaller\n  }\n};\n")),Object(o.b)("p",null,"How's that look? Not bad I reckon! ",Object(o.b)("strong",{parentName:"p"},"Betterer")," will run the test for us and update the test snapshot whenever the results get better. That will help make sure that our audit score only goes in the right direction."),Object(o.b)("p",null,"This test isn't perfect - you may noticed that it doesn't matter ",Object(o.b)("em",{parentName:"p"},"what")," the violations are, but ",Object(o.b)("em",{parentName:"p"},"how many")," there are! That's something that we could improve later! For now it will stop us introducing more audit violations, which is a good start \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f"),Object(o.b)("p",null,"We could improve this test by keeping track of the specific violations that occurred, so we can have a clearer definition of what ",Object(o.b)("em",{parentName:"p"},"better")," or ",Object(o.b)("em",{parentName:"p"},"worse")," really is, but let's leave that for another day!"),Object(o.b)("h2",{id:"thats-it"},"That's it!"),Object(o.b)("p",null,"That's all I got for now. Please let me know what you think on ",Object(o.b)("a",{parentName:"p",href:"https://twitter.com/phenomnominal"},"Twitter"),"! \ud83e\udd84"))}c.isMDXComponent=!0}}]);