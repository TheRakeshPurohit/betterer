(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{117:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return d}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function b(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),s=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=s(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),l=s(r),u=n,d=l["".concat(p,".").concat(u)]||l[u]||m[u]||i;return r?a.a.createElement(d,o(o({ref:t},c),{},{components:r})):a.a.createElement(d,o({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,p=new Array(i);p[0]=u;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:n,p[1]=o;for(var c=2;c<i;c++)p[c]=r[c];return a.a.createElement.apply(null,p)}return a.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},78:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return p})),r.d(t,"metadata",(function(){return o})),r.d(t,"toc",(function(){return b})),r.d(t,"default",(function(){return s}));var n=r(3),a=r(7),i=(r(0),r(117)),p={id:"built-in-tests",title:"Built-in Tests",slug:"/built-in-tests"},o={unversionedId:"built-in-tests",id:"built-in-tests",isDocsHomePage:!1,title:"Built-in Tests",description:"Betterer ships several built-in tests to get you started. Check out the implementations for some more inspiration for your own tests!",source:"@site/docs/built-in-tests.md",slug:"/built-in-tests",permalink:"/betterer/docs/built-in-tests",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/built-in-tests.md",version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1614393388,sidebar:"docs",previous:{title:"Development workflow",permalink:"/betterer/docs/development-workflow"}},b=[{value:"@betterer/eslint",id:"betterereslint",children:[]},{value:"@betterer/regexp",id:"bettererregexp",children:[]},{value:"@betterer/tsquery",id:"betterertsquery",children:[]},{value:"@betterer/typescript",id:"betterertypescript",children:[]}],c={toc:b};function s(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Betterer")," ships several built-in tests to get you started. Check out the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer/blob/master/packages/eslint/src/eslint.ts"},"implementations")," for some more ",Object(i.b)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer/blob/master/packages/typescript/src/typescript.ts"},"inspiration")," for your own tests!"),Object(i.b)("h3",{id:"betterereslint"},Object(i.b)("a",{parentName:"h3",href:"https://www.npmjs.com/package/@betterer/eslint"},Object(i.b)("inlineCode",{parentName:"a"},"@betterer/eslint"))),Object(i.b)("p",null,"Use this test to incrementally introduce new ",Object(i.b)("a",{parentName:"p",href:"https://eslint.org/"},Object(i.b)("strong",{parentName:"a"},"ESLint"))," rules to your codebase. You can pass as many ",Object(i.b)("strong",{parentName:"p"},"ESLint")," ",Object(i.b)("a",{parentName:"p",href:"https://eslint.org/docs/rules/"},"rule configurations")," as you like:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { eslint } from '@betterer/eslint';\n\nexport default {\n  'no more debuggers': eslint({ 'no-debugger': 'error' }).include('./src/**/*.ts')\n};\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@betterer/eslint")," is a ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test"},"BettererFileTest"),", so you can use ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test#include"},Object(i.b)("inlineCode",{parentName:"a"},"include")),", ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test#exclude"},Object(i.b)("inlineCode",{parentName:"a"},"exclude")),", ",Object(i.b)("a",{parentName:"p",href:"betterer-test#only"},Object(i.b)("inlineCode",{parentName:"a"},"only")),", and ",Object(i.b)("a",{parentName:"p",href:"betterer-test#skip"},Object(i.b)("inlineCode",{parentName:"a"},"skip")),"."),Object(i.b)("h3",{id:"bettererregexp"},Object(i.b)("a",{parentName:"h3",href:"https://www.npmjs.com/package/@betterer/regexp"},Object(i.b)("inlineCode",{parentName:"a"},"@betterer/regexp"))),Object(i.b)("p",null,"Use this test to incrementally remove ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"},Object(i.b)("strong",{parentName:"a"},"RegExp"))," matches from your codebase."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { regexp } from '@betterer/regexp';\n\nexport default {\n  'no hack comments': regexp(/(\\/\\/\\s*HACK)/i).include('**/*.ts')\n};\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@betterer/regexp")," is a ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test"},"BettererFileTest"),", so you can use ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test#include"},Object(i.b)("inlineCode",{parentName:"a"},"include")),", ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test#exclude"},Object(i.b)("inlineCode",{parentName:"a"},"exclude")),", ",Object(i.b)("a",{parentName:"p",href:"betterer-test#only"},Object(i.b)("inlineCode",{parentName:"a"},"only")),", and ",Object(i.b)("a",{parentName:"p",href:"betterer-test#skip"},Object(i.b)("inlineCode",{parentName:"a"},"skip")),"."),Object(i.b)("h3",{id:"betterertsquery"},Object(i.b)("a",{parentName:"h3",href:"https://www.npmjs.com/package/@betterer/tsquery"},Object(i.b)("inlineCode",{parentName:"a"},"@betterer/tsquery"))),Object(i.b)("p",null,"se this test to incrementally remove ",Object(i.b)("strong",{parentName:"p"},"TSQuery")," matches from your codebase. See the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/tsquery"},Object(i.b)("strong",{parentName:"a"},"TSQuery")," documentation")," for more details about the query syntax."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { tsquery } from '@betterer/tsquery';\n\nexport default {\n  'no raw console.log': tsquery(\n    './tsconfig.json',\n    'CallExpression > PropertyAccessExpression[expression.name=\"console\"][name.name=\"log\"]'\n  )\n};\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@betterer/tsquery")," is a ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test"},"BettererFileTest"),", so you can use ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test#include"},Object(i.b)("inlineCode",{parentName:"a"},"include")),", ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test#exclude"},Object(i.b)("inlineCode",{parentName:"a"},"exclude")),", ",Object(i.b)("a",{parentName:"p",href:"betterer-test#only"},Object(i.b)("inlineCode",{parentName:"a"},"only")),", and ",Object(i.b)("a",{parentName:"p",href:"betterer-test#skip"},Object(i.b)("inlineCode",{parentName:"a"},"skip")),"."),Object(i.b)("h3",{id:"betterertypescript"},Object(i.b)("a",{parentName:"h3",href:"https://www.npmjs.com/package/@betterer/typescript"},Object(i.b)("inlineCode",{parentName:"a"},"@betterer/typescript"))),Object(i.b)("p",null,"Use this test to incrementally introduce ",Object(i.b)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/compiler-options.html"},Object(i.b)("strong",{parentName:"a"},"TypeScript")," configuration")," to your codebase."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { typescript } from '@betterer/typescript';\n\nexport default {\n  'stricter compilation': typescript('./tsconfig.json', {\n    strict: true\n  })\n};\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@betterer/typescript")," is a ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test"},"BettererFileTest"),", so you can use ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test#include"},Object(i.b)("inlineCode",{parentName:"a"},"include")),", ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test#exclude"},Object(i.b)("inlineCode",{parentName:"a"},"exclude")),", ",Object(i.b)("a",{parentName:"p",href:"betterer-test#only"},Object(i.b)("inlineCode",{parentName:"a"},"only")),", and ",Object(i.b)("a",{parentName:"p",href:"betterer-test#skip"},Object(i.b)("inlineCode",{parentName:"a"},"skip")),"."))}s.isMDXComponent=!0}}]);