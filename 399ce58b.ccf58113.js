(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{115:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),b=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=b(n),u=r,h=p["".concat(i,".").concat(u)]||p[u]||m[u]||o;return n?a.a.createElement(h,s(s({ref:t},c),{},{components:n})):a.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),o=(n(0),n(115)),i={title:"Betterer v1.0.0",author:"Craig Spence",authorURL:"http://twitter.com/phenomnominal",authorTwitter:"phenomnominal"},s={permalink:"/betterer/blog/2020/05/14/betterer-v1.0.0",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/blog/blog/2020-05-14-betterer-v1.0.0.md",source:"@site/blog/2020-05-14-betterer-v1.0.0.md",description:"I'm stoked to announce v1.0.0 of Betterer!",date:"2020-05-14T00:00:00.000Z",tags:[],title:"Betterer v1.0.0",readingTime:7.125,truncated:!1,prevItem:{title:"Improving accessibility with Betterer",permalink:"/betterer/blog/2020/05/15/improving-accessibility-with-betterer"}},l=[{value:"What is <strong>Betterer</strong>?",id:"what-is-betterer",children:[]},{value:"How does it work?",id:"how-does-it-work",children:[]},{value:"What&#39;s in v1.0.0?",id:"whats-in-v100",children:[{value:"Force Update (!)",id:"force-update-",children:[]},{value:"Watch mode (!!!)",id:"watch-mode-",children:[]},{value:"VS Code extension (!!!!!)",id:"vs-code-extension-",children:[]},{value:"So, what&#39;s next?",id:"so-whats-next",children:[]}]}],c={toc:l};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"I'm stoked to announce ",Object(o.b)("a",{parentName:"p",href:"https://www.npmjs.com/org/betterer"},"v1.0.0")," of ",Object(o.b)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer"},Object(o.b)("strong",{parentName:"a"},"Betterer"),"!")),Object(o.b)("p",null,"I've been locked down in New Zealand for the last little while, and I've used some of that time to smash out what I think is a pretty compelling v1 release of a tool that I'm really excited about!"),Object(o.b)("h2",{id:"what-is-betterer"},"What is ",Object(o.b)("strong",{parentName:"h2"},"Betterer"),"?"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer"},Object(o.b)("strong",{parentName:"a"},"Betterer"))," is a test runner that helps make incremental improvements to your code! It is based upon ",Object(o.b)("a",{parentName:"p",href:"https://jestjs.io/docs/en/snapshot-testing"},Object(o.b)("strong",{parentName:"a"},"Jest"),"'s snapshot testing"),", but with a twist..."),Object(o.b)("p",null,"I'm sure many of us have been in situations where we've seen big changes we'd like to make, or new standards or design decisions that we'd like to encourage, but we just don't have the time to do it."),Object(o.b)("p",null,"Usually one of two things happen:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"You start a long-lived branch that is awful to maintain and often impossible to merge. It ends up being a time sink \u23f1")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"You and your team make an agreement to make the improvement over time. It gets forgotten about and nothing gets better (in fact usually it gets worse!) \ud83d\ude15"))),Object(o.b)("p",null,"I've seen this happen time and time and again! Sometimes it's introducing a new style rule to a codebase. Other times it's enabling stricter compilation, or decreasing the number of accessibility failures!"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Betterer")," works in two stages. The first time it runs a test, it will take a snapshot of the current state. From that point on, whenever it runs it will compare against that snapshot. It will either throw an error (if the test got worse \u274c), or update the snapshot (if the test got better \u2705). That's pretty much it!"),Object(o.b)("h2",{id:"how-does-it-work"},"How does it work?"),Object(o.b)("p",null,"To get started, you can run the following from the root of your project:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"npx @betterer/cli init\n")),Object(o.b)("p",null,"That will give you a brand new ",Object(o.b)("inlineCode",{parentName:"p"},".betterer.ts")," config file which looks something like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\n\nexport default {\n  // Add tests here \u2600\ufe0f\n};\n")),Object(o.b)("p",null,"From here, it's up to you to add some tests!"),Object(o.b)("p",null,"Let's imagine you're working with a codebase that uses ",Object(o.b)("a",{parentName:"p",href:"https://momentjs.com/"},Object(o.b)("strong",{parentName:"a"},"Moment.js")),". You'd like to migrate away from it for performance reasons."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"// src/subtract.js\nimport * as moment from 'moment';\n\nconst now = moment();\n\nconsole.log(now.subtract(4, 'years'));\n")),Object(o.b)("p",null,"Let's also imagine that you're using ",Object(o.b)("strong",{parentName:"p"},"ESLint")," in this codebase. One approach to remove ",Object(o.b)("strong",{parentName:"p"},"Moment.js")," might be to use ",Object(o.b)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-restricted-imports"},"the ",Object(o.b)("inlineCode",{parentName:"a"},"no-restricted-imports")," ",Object(o.b)("strong",{parentName:"a"},"ESLint")," rule"),", add the ",Object(o.b)("inlineCode",{parentName:"p"},"eslint-disable-next-line")," comment all over the place, and cross your fingers that people don't just add more... \ud83e\udd14"),Object(o.b)("p",null,"Betterer gives us a better option! We can create a test for that specific rule:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { eslintBetterer } from '@betterer/eslint';\n\nexport default {\n  'no import from moment': eslintBetterer('./src/**/*.js', [\n    'no-restricted-imports',\n    [\n      'error',\n      {\n        name: 'moment',\n        message: 'Please use \"date-fns\" instead.'\n      }\n    ]\n  ])\n};\n")),Object(o.b)("p",null,"The first time we run the test with ",Object(o.b)("strong",{parentName:"p"},"Betterer"),", it will look something like this:"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/phenomnomnominal/betterer/master/docs/images/first-run.gif",alt:'Terminal output showing Betterer running and indicating that the "no import from moment" test has run for the first time',title:"First run"})),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Betterer")," has now created a snapshot of the current state, stored by default in a ",Object(o.b)("inlineCode",{parentName:"p"},".betterer.results")," file:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},'// BETTERER RESULTS V1.\nexports[`no import from moment`] = {\n  timestamp: 1589459511808,\n  value: `{\n    "src/subtract.js:566118541": [\n      [0, 0, 33, "\\\'moment\\\' import is restricted from being used. Please use \\\\"date-fns\\\\" instead.", "4035178381"]\n    ]\n  }`\n};\n')),Object(o.b)("p",null,"The snapshot contains information about the current issues in the code."),Object(o.b)("p",null,"The next time we run the test, it will look like this:"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/phenomnomnominal/betterer/master/docs/images/same-run.gif",alt:'Terminal output showing Betterer running and indicating that the "no import from moment" test has run and stayed the same',title:"Same run"})),Object(o.b)("p",null,"Now, someone else on the team comes along and doesn't know about the new rule, and they add a new file that uses ",Object(o.b)("strong",{parentName:"p"},"Moment.js"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"// src/add.js\nimport * as moment from 'moment';\n\nconst now = moment();\n\nconsole.log(now.add(4, 'years'));\n")),Object(o.b)("p",null,"When ",Object(o.b)("strong",{parentName:"p"},"Betterer")," runs on their code, they get a nice big error:"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/phenomnomnominal/betterer/master/docs/images/worse-run.gif",alt:'Terminal output showing Betterer running and indicating that the "no import from moment" test has run and got worse',title:"Worse run"})),Object(o.b)("p",null,"Even though a new issue has been introduced, the ",Object(o.b)("inlineCode",{parentName:"p"},".betterer.results")," file doesn't change!"),Object(o.b)("p",null,"Our teammate reads the helpful error message from ",Object(o.b)("strong",{parentName:"p"},"ESLint")," and they update their code to use ",Object(o.b)("strong",{parentName:"p"},"date-fns"),"..."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"// src/add.js\nimport { addYears } from 'date-fns';\n\nconsole.log(addYears(Date.now(), 4));\n")),Object(o.b)("p",null,"... and once again ",Object(o.b)("strong",{parentName:"p"},"Betterer")," tells them that the result is the same:"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/phenomnomnominal/betterer/master/docs/images/same-run.gif",alt:'Terminal output showing Betterer running and indicating that the "no import from moment" test has run and stayed the same',title:"Same run"})),Object(o.b)("p",null,"Our teammate has a bit of time on their hands, so they decide to fix up our usage of ",Object(o.b)("strong",{parentName:"p"},"Moment.js")," as well! \ud83c\udf89"),Object(o.b)("p",null,"This time when they run ",Object(o.b)("strong",{parentName:"p"},"Betterer"),", everything is good:"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/phenomnomnominal/betterer/master/docs/images/better-run.gif",alt:'Terminal output showing Betterer running and indicating that the "no import from moment" test has run and got better',title:"Better run"})),Object(o.b)("p",null,"There are now no remaining issues, so this test has met its goal. Since the existing issue has been resolved, it is removed from the snapshot in the ",Object(o.b)("inlineCode",{parentName:"p"},".betterer.results")," file. This means we can move the rule from ",Object(o.b)("strong",{parentName:"p"},"Betterer")," over to the normal ",Object(o.b)("strong",{parentName:"p"},"ESLint")," configuration, so we don't reintroduce the issues again."),Object(o.b)("p",null,"Pretty neat eh! That's an example of the built-in ",Object(o.b)("inlineCode",{parentName:"p"},"@betterer/eslint")," test, but there are ",Object(o.b)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer/tree/master/packages/typescript"},"other")," ",Object(o.b)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer/tree/master/packages/regexp"},"built-in")," ",Object(o.b)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer/tree/master/packages/tsquery"},"tests")," too. And you can of course write your own tests! Check out the ",Object(o.b)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer#custom-tests"},"documentation for more details")," (still a WIP \ud83d\udea7)!"),Object(o.b)("h2",{id:"whats-in-v100"},"What's in v1.0.0?"),Object(o.b)("p",null,"Everything I've mentioned so far has been working for a while! Over the last few months I've really solidified the implementation (basically a whole rewrite to be honest!):"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Better error handling and error messages"),Object(o.b)("li",{parentName:"ul"},"Better issue comparison. It now understands file renames and issues that around within the same file"),Object(o.b)("li",{parentName:"ul"},"The ability to run tests on a single file via the JS API, with ",Object(o.b)("inlineCode",{parentName:"li"},"betterer.single")),Object(o.b)("li",{parentName:"ul"},"A whole bunch more tests!")),Object(o.b)("p",null,"But I've also added a few key features that are worthy of a 1.0.0 release! \ud83d\udd25\ud83d\udd25\ud83d\udd25"),Object(o.b)("h3",{id:"force-update-"},"Force Update (!)"),Object(o.b)("p",null,"First things first, you can now run ",Object(o.b)("strong",{parentName:"p"},"Betterer")," with the ",Object(o.b)("inlineCode",{parentName:"p"},"--update")," flag, and the snapshot will be updated even if it got worse! This is handy for when you need to ship something, even if it makes it temporarily worse:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"betterer --update\n")),Object(o.b)("p",null,"And because this is shamelessly stolen from Jest, you can also use ",Object(o.b)("inlineCode",{parentName:"p"},"-u"),"."),Object(o.b)("h3",{id:"watch-mode-"},"Watch mode (!!!)"),Object(o.b)("p",null,"This one is huge! All the changes that I made were building up to this. You can now run ",Object(o.b)("strong",{parentName:"p"},"Betterer")," in watch mode and get feedback as you fix up issues:"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://dev-to-uploads.s3.amazonaws.com/i/z47lyc7qmtnnxov4ggra.gif",alt:'Terminal output showing Betterer running in watch mode indicating that the "no import from moment" test has run on a specific file and got better',title:"Watch mode"})),Object(o.b)("p",null,"Same rules apply here, the snapshot will update whenever the test gets better!"),Object(o.b)("p",null,"There's a bunch of other cool things that could happen with watch mode (gamification much?), so I'm pumped that it's working! \ud83e\udd29"),Object(o.b)("h3",{id:"vs-code-extension-"},"VS Code extension (!!!!!)"),Object(o.b)("p",null,"Way to bury the lede! This is probably the coolest bit! Let's just say it was a build up."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Betterer")," runs entirely in its own world, so the usual ",Object(o.b)("strong",{parentName:"p"},"ESLint")," or ",Object(o.b)("strong",{parentName:"p"},"TypeScript")," extensions can't report the issues. But everyone loves seeing red squiggly lines in the code editor, so ",Object(o.b)("strong",{parentName:"p"},"Betterer")," now has ",Object(o.b)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=Betterer.betterer-vscode"},"its very own VS Code Extension")," \ud83e\udd2f!"),Object(o.b)("h4",{id:"initialise-in-a-new-project"},"Initialise in a new project"),Object(o.b)("p",null,"You can run the ",Object(o.b)("inlineCode",{parentName:"p"},"betterer.init")," command in a project! It will generate config files and update your ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," with scripts and dependencies:"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://dev-to-uploads.s3.amazonaws.com/i/7ij09ag7q2v12pv56h5x.gif",alt:"VS Code screen capture output showing Betterer being initialised in a project",title:"VS Code Extension Betterer init"})),Object(o.b)("h4",{id:"see-all-issues-in-a-file"},"See all issues in a file"),Object(o.b)("p",null,"And when you've got some tests setup, it will show you all the existing issues in a file, and when they were first created. And it will show you any new issues as you make them:"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://dev-to-uploads.s3.amazonaws.com/i/uxmtcar93enfqgx12orr.gif",alt:"VS Code screen capture output showing Betterer highlighting issues in a project",title:"VS Code Extension Betterer issues"})),Object(o.b)("p",null,"I reckon that's pretty sweet!"),Object(o.b)("h3",{id:"so-whats-next"},"So, what's next?"),Object(o.b)("p",null,"Well, you're going to try out ",Object(o.b)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer"},Object(o.b)("strong",{parentName:"a"},"Betterer"))," and open lots of issues and help me make it better(er)! If you'd like to contribute..."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"There are ",Object(o.b)("em",{parentName:"li"},"definitely")," bugs to fix"),Object(o.b)("li",{parentName:"ul"},"The test coverage is pretty good, but there aren't any E2E tests for the VS Code extension yet"),Object(o.b)("li",{parentName:"ul"},"The logging and reporting implementation could use some work"),Object(o.b)("li",{parentName:"ul"},"There is so much documentation to be written")),Object(o.b)("p",null,"What a time to be alive! \ud83e\udd13"),Object(o.b)("p",null,"In case you can't tell, I'm unreasonably excited about this and I really think this will help with large and legacy codebases. Please let me know what you think in the comments or hit me up on the ",Object(o.b)("a",{parentName:"p",href:"https://twitter.com/phenomnominal"},"Twitters"),"!"))}b.isMDXComponent=!0}}]);