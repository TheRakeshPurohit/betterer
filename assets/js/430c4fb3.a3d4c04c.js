"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[883],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return c}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),o=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),k=o(r),c=i,m=k["".concat(p,".").concat(c)]||k[c]||u[c]||a;return r?n.createElement(m,l(l({ref:t},d),{},{components:r})):n.createElement(m,l({ref:t},d))}));function c(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=k;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var o=2;o<a;o++)l[o]=r[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}k.displayName="MDXCreateElement"},5097:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return o},toc:function(){return d},default:function(){return k}});var n=r(7462),i=r(3366),a=(r(7294),r(3905)),l=["components"],s={id:"betterer-test",title:"Betterer Test",description:"Betterer Test API reference",slug:"/betterer-test"},p=void 0,o={unversionedId:"api/betterer-test",id:"api/betterer-test",isDocsHomePage:!1,title:"Betterer Test",description:"Betterer Test API reference",source:"@site/docs/api/test.md",sourceDirName:"api",slug:"/betterer-test",permalink:"/betterer/docs/betterer-test",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/test.md",version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1620637078,formattedLastUpdatedAt:"5/10/2021",frontMatter:{id:"betterer-test",title:"Betterer Test",description:"Betterer Test API reference",slug:"/betterer-test"},sidebar:"api",previous:{title:"Betterer Runner",permalink:"/betterer/docs/runner"},next:{title:"Betterer File Test",permalink:"/betterer/docs/betterer-file-test"}},d=[{value:"<code>BettererTestOptions</code>",id:"betterertestoptions",children:[{value:"Generics",id:"generics",children:[]}]},{value:"<code>BettererTestOptionsBasic</code>",id:"betterertestoptionsbasic",children:[{value:"Properties",id:"properties",children:[]}]},{value:"<code>BettererTestOptionsComplex</code>",id:"betterertestoptionscomplex",children:[{value:"Properties",id:"properties-1",children:[]}]},{value:"<code>BettererTest</code>",id:"betterertest",children:[{value:"Constructor",id:"constructor",children:[]},{value:"Properties",id:"properties-2",children:[]},{value:"Methods",id:"methods",children:[]},{value:"<code>only()</code>",id:"only",children:[]},{value:"<code>skip()</code>",id:"skip",children:[]}]},{value:"<code>BettererTestConfig</code>",id:"betterertestconfig",children:[]},{value:"<code>BettererTestConstraint</code>",id:"betterertestconstraint",children:[]},{value:"<code>BettererTestFunction</code>",id:"betterertestfunction",children:[]},{value:"<code>BettererTestGoal</code>",id:"betterertestgoal",children:[]},{value:"<code>BettererDiffer</code>",id:"bettererdiffer",children:[]},{value:"<code>BettererDiff</code>",id:"bettererdiff",children:[{value:"Properties",id:"properties-3",children:[]},{value:"Methods",id:"methods-1",children:[]},{value:"<code>log()</code>",id:"log",children:[]}]},{value:"<code>BettererSerialiser</code>",id:"bettererserialiser",children:[]},{value:"<code>BettererSerialise</code>",id:"bettererserialise",children:[]},{value:"<code>BettererDeserialise</code>",id:"bettererdeserialise",children:[]},{value:"<code>BettererPrinter</code>",id:"bettererprinter",children:[]},{value:"<code>BettererProgress</code>",id:"bettererprogress",children:[]}],u={toc:d};function k(e){var t=e.components,r=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"betterertestoptions"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererTestOptions")),(0,a.kt)("p",null,"Whenever you create a ",(0,a.kt)("a",{parentName:"p",href:"#betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))," you can pass an options object. It will be validated by and turned into a ",(0,a.kt)("a",{parentName:"p",href:"#betterertestconfig"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTestConfig")),"."),(0,a.kt)("p",null,"There is a lot of power (and therefore complexity) in this options object. The types should hopefully guide you towards a useful test, but feel free to reach out if you need help!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestOptions<DeserialisedType = unknown, SerialisedType = DeserialisedType, DiffType = null> =\n  | BettererTestOptionsBasic\n  | BettererTestOptionsComplex<DeserialisedType, SerialisedType, DiffType>;\n")),(0,a.kt)("h3",{id:"generics"},"Generics"),(0,a.kt)("h4",{id:"deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"h4"},"DeserialisedType")," (default ",(0,a.kt)("inlineCode",{parentName:"h4"},"unknown"),")"),(0,a.kt)("p",null,"This type describes the basic result type of a test. For simple tests this can just be a ",(0,a.kt)("inlineCode",{parentName:"p"},"number")," or other primitive. More complex types can be used, but will possibly require implementing ",(0,a.kt)("a",{parentName:"p",href:"#bettererdiffer"},(0,a.kt)("inlineCode",{parentName:"a"},"differ")),", ",(0,a.kt)("a",{parentName:"p",href:"#bettererserialiser"},(0,a.kt)("inlineCode",{parentName:"a"},"serialiser")),", and ",(0,a.kt)("a",{parentName:"p",href:"#bettererprinter"},(0,a.kt)("inlineCode",{parentName:"a"},"printer")),"."),(0,a.kt)("h4",{id:"serialisedtype-default-deserialisedtype"},(0,a.kt)("inlineCode",{parentName:"h4"},"SerialisedType")," (default ",(0,a.kt)("inlineCode",{parentName:"h4"},"DeserialisedType"),")"),(0,a.kt)("p",null,"This type describes the serialised type of a test result. Some complex result types (like ",(0,a.kt)("a",{parentName:"p",href:"./betterer-file-test#bettererfiletestresult"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererFileTestResult")),") cannot be directly serialised to JSON, so it must be converted to a serailisable form."),(0,a.kt)("h4",{id:"difftype-default-null"},(0,a.kt)("inlineCode",{parentName:"h4"},"DiffType")," (default ",(0,a.kt)("inlineCode",{parentName:"h4"},"null"),")"),(0,a.kt)("p",null,"This type describes the diff between two results. Some complex result types (like ",(0,a.kt)("a",{parentName:"p",href:"./betterer-file-test#bettererfiletestresult"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererFileTestResult")),") cannot be compared directly, so a diff can be constructed to better express the comparison."),(0,a.kt)("h2",{id:"betterertestoptionsbasic"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererTestOptionsBasic")),(0,a.kt)("p",null,"The least complex version of a ",(0,a.kt)("a",{parentName:"p",href:"#betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))," operates on simple numbers and can be defined with just a few properties."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestOptionsBasic = {\n  constraint: BettererTestConstraint<number>;\n  test: BettererTestFunction<number>;\n  goal?: BettererTestGoal<number> | number;\n  deadline?: Date | string;\n};\n")),(0,a.kt)("h3",{id:"properties"},"Properties"),(0,a.kt)("h4",{id:"constraint-betterertestconstraint"},(0,a.kt)("inlineCode",{parentName:"h4"},"constraint"),": ",(0,a.kt)("a",{parentName:"h4",href:"#betterertestconstraint"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTestConstraint"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The constraint function for the test.")),(0,a.kt)("h4",{id:"test-betterertestfunction"},(0,a.kt)("inlineCode",{parentName:"h4"},"test"),": ",(0,a.kt)("a",{parentName:"h4",href:"#betterertestfunction"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTestFunction"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The function that runs the actual test.")),(0,a.kt)("h4",{id:"goal-betterertestgoal--number"},(0,a.kt)("inlineCode",{parentName:"h4"},"goal"),": ",(0,a.kt)("a",{parentName:"h4",href:"#betterertestgoal"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTestGoal"))," | ",(0,a.kt)("inlineCode",{parentName:"h4"},"number")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The goal function or value for the test.")),(0,a.kt)("h4",{id:"deadline-date--string"},(0,a.kt)("inlineCode",{parentName:"h4"},"deadline"),": ",(0,a.kt)("inlineCode",{parentName:"h4"},"Date")," | ",(0,a.kt)("inlineCode",{parentName:"h4"},"string")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The deadline for the test.")),(0,a.kt)("h2",{id:"betterertestoptionscomplex"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererTestOptionsComplex")),(0,a.kt)("p",null,"For a more complex version ",(0,a.kt)("a",{parentName:"p",href:"#betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))," that operates on more complex objects, you may need to define more complex behaviour."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestOptionsComplex<DeserialisedType, SerialisedType, DiffType> = {\n  constraint: BettererTestConstraint<DeserialisedType>;\n  test: BettererTestFunction<DeserialisedType>;\n  differ: BettererDiffer<DeserialisedType, DiffType>;\n  printer?: BettererPrinter<SerialisedType>;\n  progress?: BettererProgress<DeserialisedType>;\n  serialiser: BettererSerialiser<DeserialisedType, SerialisedType>;\n  goal: BettererTestGoal<DeserialisedType> | DeserialisedType;\n  deadline?: Date | string;\n};\n")),(0,a.kt)("h3",{id:"properties-1"},"Properties"),(0,a.kt)("h4",{id:"constraint-betterertestconstraint-1"},(0,a.kt)("inlineCode",{parentName:"h4"},"constraint"),": ",(0,a.kt)("a",{parentName:"h4",href:"#betterertestconstraint"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTestConstraint"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The constraint function for the test.")),(0,a.kt)("h4",{id:"test-betterertestfunction-1"},(0,a.kt)("inlineCode",{parentName:"h4"},"test"),": ",(0,a.kt)("a",{parentName:"h4",href:"#betterertestfunction"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTestFunction"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The function that runs the actual test.")),(0,a.kt)("h4",{id:"differ-bettererdiffer"},(0,a.kt)("inlineCode",{parentName:"h4"},"differ"),": ",(0,a.kt)("a",{parentName:"h4",href:"#bettererdiffer"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererDiffer"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The function that compares two test results.")),(0,a.kt)("h4",{id:"printer-bettererprinter"},(0,a.kt)("inlineCode",{parentName:"h4"},"printer"),": ",(0,a.kt)("a",{parentName:"h4",href:"#bettererprinter"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererPrinter"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The function that converts a serialised test result to the string that will be saved in the ",(0,a.kt)("a",{parentName:"p",href:"./results-file"},"test results file"))),(0,a.kt)("h4",{id:"progress-bettererprogress"},(0,a.kt)("inlineCode",{parentName:"h4"},"progress"),": ",(0,a.kt)("a",{parentName:"h4",href:"#bettererprogress"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererProgress"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The function that converts a test result to a number value that represents the progress towards the goal.")),(0,a.kt)("h4",{id:"serialiser-bettererserialiser"},(0,a.kt)("inlineCode",{parentName:"h4"},"serialiser"),": ",(0,a.kt)("a",{parentName:"h4",href:"#bettererserialiser"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererSerialiser"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The functions that serialises and deserialises a test result between the ",(0,a.kt)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))," and ",(0,a.kt)("a",{parentName:"p",href:"#serialisedtype-default-deserialisedtype"},(0,a.kt)("inlineCode",{parentName:"a"},"SerialisedType")),".")),(0,a.kt)("h4",{id:"goal-betterertestgoal--number-1"},(0,a.kt)("inlineCode",{parentName:"h4"},"goal"),": ",(0,a.kt)("a",{parentName:"h4",href:"#betterertestgoal"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTestGoal"))," | ",(0,a.kt)("inlineCode",{parentName:"h4"},"number")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The goal function or value for the test.")),(0,a.kt)("h4",{id:"deadline-date--string-1"},(0,a.kt)("inlineCode",{parentName:"h4"},"deadline"),": ",(0,a.kt)("inlineCode",{parentName:"h4"},"Date")," | ",(0,a.kt)("inlineCode",{parentName:"h4"},"string")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The deadline for the test.")),(0,a.kt)("h2",{id:"betterertest"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererTest")),(0,a.kt)("p",null,"The interface to the ",(0,a.kt)("strong",{parentName:"p"},"Betterer")," ",(0,a.kt)("a",{parentName:"p",href:"./tests"},"test system"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"class BettererTest {\n  get config(): BettererTestConfig;\n  get isOnly(): boolean;\n  get isSkipped(): boolean;\n  constructor(options: BettererTestOptions);\n  only(): this;\n  skip(): this;\n}\n")),(0,a.kt)("h3",{id:"constructor"},"Constructor"),(0,a.kt)("p",null,"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"options"),": ",(0,a.kt)("a",{parentName:"li",href:"#betterertestoptions"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTestOptions")))),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { BettererTest } from '@betterer/betterer';\n\nconst test = new BettererTest({ ... });\n")),(0,a.kt)("h3",{id:"properties-2"},"Properties"),(0,a.kt)("h4",{id:"config-betterertestconfig"},(0,a.kt)("inlineCode",{parentName:"h4"},"config"),": ",(0,a.kt)("a",{parentName:"h4",href:"#betterertestconfig"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTestConfig"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The complete configuration for the test.")),(0,a.kt)("h4",{id:"isonly-boolean"},(0,a.kt)("inlineCode",{parentName:"h4"},"isOnly"),": ",(0,a.kt)("inlineCode",{parentName:"h4"},"boolean")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Calling ",(0,a.kt)("inlineCode",{parentName:"p"},"only()")," will mark this as ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". If this is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," all other tests will be skipped.")),(0,a.kt)("h4",{id:"isskipped-boolean"},(0,a.kt)("inlineCode",{parentName:"h4"},"isSkipped"),": ",(0,a.kt)("inlineCode",{parentName:"h4"},"boolean")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Calling ",(0,a.kt)("inlineCode",{parentName:"p"},"skip()")," will mark this as ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". If this is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," this test will be skipped.")),(0,a.kt)("h3",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"only"},(0,a.kt)("inlineCode",{parentName:"h3"},"only()")),(0,a.kt)("p",null,"Run only this test. All other tests will be marked as skipped."),(0,a.kt)("p",null,"Returns: ",(0,a.kt)("a",{parentName:"p",href:"#betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))),(0,a.kt)("h3",{id:"skip"},(0,a.kt)("inlineCode",{parentName:"h3"},"skip()")),(0,a.kt)("p",null,"Skip this test."),(0,a.kt)("p",null,"Returns: ",(0,a.kt)("a",{parentName:"p",href:"#betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))),(0,a.kt)("h2",{id:"betterertestconfig"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererTestConfig")),(0,a.kt)("p",null,"The validated configuration for a ",(0,a.kt)("a",{parentName:"p",href:"#betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestConfig<DeserialisedType, SerialisedType, DiffType> = {\n  constraint: BettererTestConstraint<DeserialisedType>;\n  deadline: number;\n  goal: BettererTestGoal<DeserialisedType>;\n  test: BettererTestFunction<DeserialisedType>;\n  differ: BettererDiffer<DeserialisedType, DiffType>;\n  printer: BettererPrinter<SerialisedType>;\n  progress: BettererProgress<DeserialisedType> | null;\n  serialiser: BettererSerialiser<DeserialisedType, SerialisedType>;\n  type: BettererTestType;\n};\n")),(0,a.kt)("h2",{id:"betterertestconstraint"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererTestConstraint")),(0,a.kt)("p",null,"A function that checks if a test result is ",(0,a.kt)("a",{parentName:"p",href:"./constraints#bettererconstraintresult"},(0,a.kt)("inlineCode",{parentName:"a"},"better"),", ",(0,a.kt)("inlineCode",{parentName:"a"},"worse"),", or the ",(0,a.kt)("inlineCode",{parentName:"a"},"same")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestConstraint<DeserialisedType> = (\n  result: DeserialisedType,\n  expected: DeserialisedType\n) => Promise<BettererConstraintResult> | BettererConstraintResult;\n")),(0,a.kt)("p",null,"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"result"),": ",(0,a.kt)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))," - Result from the current test run."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"expected"),": ",(0,a.kt)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))," - Expected result from the results file.")),(0,a.kt)("p",null,"Returns: ",(0,a.kt)("a",{parentName:"p",href:"./constraints#bettererconstraintresult"},(0,a.kt)("inlineCode",{parentName:"a"},"Promise<BettererConstraintResult>"))," | ",(0,a.kt)("a",{parentName:"p",href:"./constraints#bettererconstraintresult"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererConstraintResult"))),(0,a.kt)("h2",{id:"betterertestfunction"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererTestFunction")),(0,a.kt)("p",null,"A function that runs the actual test."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestFunction<DeserialisedType> = (run: BettererRun) => Promise<DeserialisedType> | DeserialisedType;\n")),(0,a.kt)("p",null,"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"run"),": ",(0,a.kt)("a",{parentName:"li",href:"./context#bettererrun"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererRun"))," - The current run.")),(0,a.kt)("p",null,"Returns: ",(0,a.kt)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"Promise<DeserialisedType>"))," | ",(0,a.kt)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))),(0,a.kt)("h2",{id:"betterertestgoal"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererTestGoal")),(0,a.kt)("p",null,"A function that returns whether the test has met its goal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestGoal<DeserialisedType> = (result: DeserialisedType) => Promise<boolean> | boolean;\n")),(0,a.kt)("p",null,"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"result"),": ",(0,a.kt)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))," - The current result.")),(0,a.kt)("p",null,"Returns: ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise<boolean>")," | ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean")),(0,a.kt)("h2",{id:"bettererdiffer"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererDiffer")),(0,a.kt)("p",null,"A function that compares two test results."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererDiffer<DeserialisedType, DiffType> = (\n  expected: DeserialisedType,\n  result: DeserialisedType\n) => BettererDiff<DeserialisedType, DiffType>;\n")),(0,a.kt)("p",null,"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"expected"),": ",(0,a.kt)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))," - The expected result."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"result"),": ",(0,a.kt)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))," - The current result.")),(0,a.kt)("p",null,"Returns: ",(0,a.kt)("inlineCode",{parentName:"p"},"BettererDiff<DeserialisedType, DiffType>")),(0,a.kt)("h2",{id:"bettererdiff"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererDiff")),(0,a.kt)("p",null,"A object that describes the diff between two results."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererDiff<DeserialisedType = unknown, DiffType = null> = {\n  expected: DeserialisedType;\n  result: DeserialisedType;\n  diff: DiffType;\n  log: (logger: BettererLogger) => Promise<void>;\n};\n")),(0,a.kt)("h3",{id:"properties-3"},"Properties"),(0,a.kt)("h4",{id:"expected-deserialisedtype"},(0,a.kt)("inlineCode",{parentName:"h4"},"expected"),": ",(0,a.kt)("a",{parentName:"h4",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The expected result.")),(0,a.kt)("h4",{id:"result-deserialisedtype"},(0,a.kt)("inlineCode",{parentName:"h4"},"result"),": ",(0,a.kt)("a",{parentName:"h4",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The current result.")),(0,a.kt)("h4",{id:"diff-difftype"},(0,a.kt)("inlineCode",{parentName:"h4"},"diff"),": ",(0,a.kt)("a",{parentName:"h4",href:"#difftype-default-null"},(0,a.kt)("inlineCode",{parentName:"a"},"DiffType"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The difference between ",(0,a.kt)("inlineCode",{parentName:"p"},"expected")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"result"),".")),(0,a.kt)("h3",{id:"methods-1"},"Methods"),(0,a.kt)("h3",{id:"log"},(0,a.kt)("inlineCode",{parentName:"h3"},"log()")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"A logging hook for the diff. This is called by the reporter whenever a test becomes worse.")),(0,a.kt)("p",null,"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"logger"),": ",(0,a.kt)("a",{parentName:"li",href:"./logger#bettererlogger"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererLogger"))," - The reporter logger.")),(0,a.kt)("p",null,"Returns: ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise<void>")),(0,a.kt)("h2",{id:"bettererserialiser"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererSerialiser")),(0,a.kt)("p",null,"The functions that serialises and deserialises a test result between the ",(0,a.kt)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))," and ",(0,a.kt)("a",{parentName:"p",href:"#serialisedtype-default-deserialisedtype"},(0,a.kt)("inlineCode",{parentName:"a"},"SerialisedType")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererSerialiser<DeserialisedType, SerialisedType = DeserialisedType> = {\n  serialise: BettererSerialise<DeserialisedType, SerialisedType>;\n  deserialise: BettererDeserialise<DeserialisedType, SerialisedType>;\n};\n")),(0,a.kt)("h2",{id:"bettererserialise"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererSerialise")),(0,a.kt)("p",null,"The functions that coverts from a ",(0,a.kt)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))," to a ",(0,a.kt)("a",{parentName:"p",href:"#serialisedtype-default-deserialisedtype"},(0,a.kt)("inlineCode",{parentName:"a"},"SerialisedType")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererSerialise<DeserialisedType, SerialisedType> = (result: DeserialisedType) => SerialisedType;\n")),(0,a.kt)("p",null,"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"result"),": ",(0,a.kt)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))," - The deserialised result.")),(0,a.kt)("p",null,"Returns: ",(0,a.kt)("a",{parentName:"p",href:"#serialisedtype-default-deserialisedtype"},(0,a.kt)("inlineCode",{parentName:"a"},"SerialisedType"))),(0,a.kt)("h2",{id:"bettererdeserialise"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererDeserialise")),(0,a.kt)("p",null,"The functions that coverts from a ",(0,a.kt)("a",{parentName:"p",href:"#serialisedtype-default-deserialisedtype"},(0,a.kt)("inlineCode",{parentName:"a"},"SerialisedType"))," to a ",(0,a.kt)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererDeserialise<DeserialisedType, SerialisedType> = (serialised: SerialisedType) => DeserialisedType;\n")),(0,a.kt)("p",null,"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"serialised"),": ",(0,a.kt)("a",{parentName:"li",href:"#serialisedtype-default-deserialisedtype"},(0,a.kt)("inlineCode",{parentName:"a"},"SerialisedType"))," - The serialised result.")),(0,a.kt)("p",null,"Returns: ",(0,a.kt)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))),(0,a.kt)("h2",{id:"bettererprinter"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererPrinter")),(0,a.kt)("p",null,"A function that converts a serialised test result to the string that will be saved in the ",(0,a.kt)("a",{parentName:"p",href:"./results-file"},"test results file"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererPrinter<SerialisedType> = (serialised: SerialisedType) => MaybeAsync<string>;\n")),(0,a.kt)("p",null,"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"serialised"),": ",(0,a.kt)("a",{parentName:"li",href:"#serialisedtype-default-deserialisedtype"},(0,a.kt)("inlineCode",{parentName:"a"},"SerialisedType"))," - The serialised result.")),(0,a.kt)("p",null,"Returns: ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise<string>")," | ",(0,a.kt)("inlineCode",{parentName:"p"},"string")),(0,a.kt)("h2",{id:"bettererprogress"},(0,a.kt)("inlineCode",{parentName:"h2"},"BettererProgress")),(0,a.kt)("p",null,"A function that converts a test result to a number value that represents the progress towards the goal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererProgress<DeserialisedType> = (\n  baseline: DeserialisedType | null,\n  result: DeserialisedType | null\n) => MaybeAsync<BettererDelta | null>;\n")),(0,a.kt)("p",null,"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"baseline"),": ",(0,a.kt)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))," | ",(0,a.kt)("inlineCode",{parentName:"li"},"null")," - The baseline result."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"result"),": ",(0,a.kt)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},(0,a.kt)("inlineCode",{parentName:"a"},"DeserialisedType"))," | ",(0,a.kt)("inlineCode",{parentName:"li"},"null")," - The current result.")),(0,a.kt)("p",null,"Returns: ",(0,a.kt)("a",{parentName:"p",href:"#bettererdelta"},(0,a.kt)("inlineCode",{parentName:"a"},"Promise<BettererDelta>"))," | ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise<null>")," | ",(0,a.kt)("a",{parentName:"p",href:"#bettererdelta"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererDelta"))," | ",(0,a.kt)("inlineCode",{parentName:"p"},"null")))}k.isMDXComponent=!0}}]);