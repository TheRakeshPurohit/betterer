(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[80],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return l},kt:function(){return y}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=c(r),y=i,f=d["".concat(s,".").concat(y)]||d[y]||u[y]||a;return r?n.createElement(f,p(p({ref:t},l),{},{components:r})):n.createElement(f,p({ref:t},l))}));function y(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,p=new Array(a);p[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,p[1]=o;for(var c=2;c<a;c++)p[c]=r[c];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5024:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var n=r(2122),i=r(9756),a=(r(7294),r(3905)),p=["components"],o={id:"betterer-and-typescript",title:"Betterer & TypeScript",sidebar_label:"Betterer & TypeScript",slug:"/betterer-and-typescript"},s={unversionedId:"betterer-and-typescript",id:"betterer-and-typescript",isDocsHomePage:!1,title:"Betterer & TypeScript",description:"Betterer and TypeScript work pretty well together \ud83d\udc96. Not only can Betterer be used to help migrate a project to TypeScript, but TypeScript can help validate the types as you write your tests. TypeScript is included as one of Betterer's optionalDependencies, and it is recommended to use them together.",source:"@site/docs/betterer-and-typescript.md",sourceDirName:".",slug:"/betterer-and-typescript",permalink:"/betterer/docs/betterer-and-typescript",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/betterer-and-typescript.md",version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1614393388,formattedLastUpdatedAt:"2/27/2021",sidebar_label:"Betterer & TypeScript",frontMatter:{id:"betterer-and-typescript",title:"Betterer & TypeScript",sidebar_label:"Betterer & TypeScript",slug:"/betterer-and-typescript"},sidebar:"docs",previous:{title:"Results file",permalink:"/betterer/docs/results-file"},next:{title:"Filters",permalink:"/betterer/docs/filters"}},c=[{value:"TypeScript configuration",id:"typescript-configuration",children:[]},{value:"Disabling TypeScript",id:"disabling-typescript",children:[]}],l={toc:c};function u(e){var t=e.components,r=(0,i.Z)(e,p);return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Betterer")," and ",(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},(0,a.kt)("strong",{parentName:"a"},"TypeScript"))," work pretty well together \ud83d\udc96. Not only can ",(0,a.kt)("strong",{parentName:"p"},"Betterer")," be used to help migrate a project to ",(0,a.kt)("strong",{parentName:"p"},"TypeScript"),", but ",(0,a.kt)("strong",{parentName:"p"},"TypeScript")," can help validate the types as you write your tests. ",(0,a.kt)("strong",{parentName:"p"},"TypeScript")," is included as one of ",(0,a.kt)("strong",{parentName:"p"},"Betterer"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"optionalDependencies"),", and it is recommended to use them together."),(0,a.kt)("p",null,"By default, running the ",(0,a.kt)("a",{parentName:"p",href:"./installation#adding-betterer-to-your-project"},(0,a.kt)("strong",{parentName:"a"},"Betterer")," initialisation script")," will create a ",(0,a.kt)("a",{parentName:"p",href:"./test-definition-file"},(0,a.kt)("inlineCode",{parentName:"a"},".betterer.ts")," test definition file"),", and add ",(0,a.kt)("strong",{parentName:"p"},"TypeScript")," as a dependency. You won't ever need to compile the test definition file as ",(0,a.kt)("strong",{parentName:"p"},"Betterer")," uses ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/TypeStrong/ts-node"},(0,a.kt)("inlineCode",{parentName:"a"},"ts-node")),"."),(0,a.kt)("h2",{id:"typescript-configuration"},"TypeScript configuration"),(0,a.kt)("p",null,"If your project contains a ",(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/compiler-options.html"},(0,a.kt)("inlineCode",{parentName:"a"},"tsconfig.json"))," file, you can pass it to ",(0,a.kt)("strong",{parentName:"p"},"Betterer")," the ",(0,a.kt)("a",{parentName:"p",href:"./running-betterer#start-options"},(0,a.kt)("inlineCode",{parentName:"a"},"--tsconfig")," option"),"."),(0,a.kt)("h2",{id:"disabling-typescript"},"Disabling TypeScript"),(0,a.kt)("p",null,"If you ",(0,a.kt)("em",{parentName:"p"},"don't")," want to use ",(0,a.kt)("strong",{parentName:"p"},"TypeScript"),", you can opt out by passing a ",(0,a.kt)("inlineCode",{parentName:"p"},".js")," file to the initialisation script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Run this from the root of your project:\nnpx @betterer/cli init --config .betterer.js\n")),(0,a.kt)("p",null,"This will skip adding the ",(0,a.kt)("strong",{parentName:"p"},"TypeScript")," dependency, and create a ",(0,a.kt)("strong",{parentName:"p"},"JavaScript")," test definition file at the given path."))}u.isMDXComponent=!0}}]);