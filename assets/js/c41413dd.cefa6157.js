"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[533],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),f=a,k=u["".concat(p,".").concat(f)]||u[f]||d[f]||o;return r?n.createElement(k,i(i({ref:t},c),{},{components:r})):n.createElement(k,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},467:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={id:"config",title:"Betterer Configuration",sidebar_label:"Betterer Configuration",slug:"/config"},p=void 0,s={unversionedId:"api/config",id:"api/config",isDocsHomePage:!1,title:"Betterer Configuration",description:"Betterer options",source:"@site/docs/api/config.md",sourceDirName:"api",slug:"/config",permalink:"/betterer/docs/config",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/config.md",version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1618033627,formattedLastUpdatedAt:"4/10/2021",frontMatter:{id:"config",title:"Betterer Configuration",sidebar_label:"Betterer Configuration",slug:"/config"},sidebar:"api",previous:{title:"Betterer API",permalink:"/betterer/docs/api"},next:{title:"Betterer Context",permalink:"/betterer/docs/context"}},c=[{value:"Betterer options",id:"betterer-options",children:[{value:"Base options",id:"base-options",children:[]},{value:"<code>BettererOptionsRunner</code>",id:"bettereroptionsrunner",children:[]},{value:"<code>BettererOptionsStart</code>",id:"bettereroptionsstart",children:[]},{value:"<code>BettererOptionsWatch</code>",id:"bettereroptionswatch",children:[]}]},{value:"<code>BettererConfig</code>",id:"bettererconfig",children:[]},{value:"<code>BettererConfigFilters</code>",id:"bettererconfigfilters",children:[]},{value:"<code>BettererConfigIgnores</code>",id:"bettererconfigignores",children:[]},{value:"<code>BettererConfigPaths</code>",id:"bettererconfigpaths",children:[]},{value:"<code>BettererConfigReporter</code>",id:"bettererconfigreporter",children:[]},{value:"<code>BettererConfigReporters</code>",id:"bettererconfigreporters",children:[]}],d={toc:c};function u(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"betterer-options"},"Betterer options"),(0,o.kt)("p",null,"Whenever you run ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," (from the ",(0,o.kt)("a",{parentName:"p",href:"./running-betterer"},"CLI")," or via the ",(0,o.kt)("a",{parentName:"p",href:"./api"},"JS API"),") you can pass an options object. It will be validated by ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," and turned into a ",(0,o.kt)("a",{parentName:"p",href:"#bettererconfig"},(0,o.kt)("inlineCode",{parentName:"a"},"BettererConfig")),"."),(0,o.kt)("h3",{id:"base-options"},"Base options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererOptionsBase = Partial<{\n  configPaths: Array<string> | string;\n  cwd: string;\n  filters: Array<string | RegExp> | string;\n  reporters: Array<string | BettererReporter>;\n  resultsPath: string;\n  silent: boolean;\n  tsconfigPath: string;\n}>;\n")),(0,o.kt)("h4",{id:"configpaths-arraystring--string--string-default-bettererts"},(0,o.kt)("inlineCode",{parentName:"h4"},"configPaths"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"Array<string> | string")," | ",(0,o.kt)("inlineCode",{parentName:"h4"},"string")," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"['./.betterer.ts]"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The list of ",(0,o.kt)("a",{parentName:"p",href:"./test-definition-file"},"test definition file paths")," containing ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," tests for the current run.")),(0,o.kt)("h4",{id:"cwd-string-default-processcwd"},(0,o.kt)("inlineCode",{parentName:"h4"},"cwd"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"string")," (default: ",(0,o.kt)("a",{parentName:"h4",href:"https://nodejs.org/api/process.html#process_process_cwd"},(0,o.kt)("inlineCode",{parentName:"a"},"process.cwd()")),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The current working directory for the current run.")),(0,o.kt)("h4",{id:"filters-arraystring--regexp--string-default-"},(0,o.kt)("inlineCode",{parentName:"h4"},"filters"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"Array<string | RegExp> | string")," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"[]"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The list of filters to select tests for the current run. Will be parsed into ",(0,o.kt)("a",{parentName:"p",href:"#bettererconfigfilters"},(0,o.kt)("inlineCode",{parentName:"a"},"BettererConfigFilters")),".")),(0,o.kt)("h4",{id:"reporters-bettererconfigreporters-default-bettererreporter"},(0,o.kt)("inlineCode",{parentName:"h4"},"reporters"),": ",(0,o.kt)("a",{parentName:"h4",href:"#bettererconfigreporters"},(0,o.kt)("inlineCode",{parentName:"a"},"BettererConfigReporters"))," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"['@betterer/reporter']"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The list of ",(0,o.kt)("a",{parentName:"p",href:"./reporters"},"reporters")," for the current run.")),(0,o.kt)("h4",{id:"resultspath-string-default-bettererresults"},(0,o.kt)("inlineCode",{parentName:"h4"},"resultsPath"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"string")," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"'.betterer.results'"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The path to the ",(0,o.kt)("a",{parentName:"p",href:"./results-file"},"results file")," for the current run.")),(0,o.kt)("h4",{id:"silent-boolean-default-true"},(0,o.kt)("inlineCode",{parentName:"h4"},"silent"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"boolean")," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"true"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"When set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", all default reporters will be disabled. Custom reporters will still work normally.")),(0,o.kt)("h4",{id:"tsconfigpath-string--null-default-null"},(0,o.kt)("inlineCode",{parentName:"h4"},"tsconfigPath"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"string | null")," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"null"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The path to the ",(0,o.kt)("a",{parentName:"p",href:"./betterer-and-typescript"},"TypeScript configuration")," for the current run.")),(0,o.kt)("h3",{id:"bettereroptionsrunner"},(0,o.kt)("inlineCode",{parentName:"h3"},"BettererOptionsRunner")),(0,o.kt)("p",null,"Options object for creating a ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," runner. It will be validated by ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," and turned into a ",(0,o.kt)("a",{parentName:"p",href:"#bettererconfig"},(0,o.kt)("inlineCode",{parentName:"a"},"BettererConfig")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererOptionsRunner = BettererOptionsBase &\n  Partial<{\n    ignores: BettererConfigIgnores;\n  }>;\n")),(0,o.kt)("p",null,"All the ",(0,o.kt)("a",{parentName:"p",href:"#base-options"},(0,o.kt)("inlineCode",{parentName:"a"},"base options"))," above as well as:"),(0,o.kt)("h4",{id:"ignores-bettererconfigignores-default-"},(0,o.kt)("inlineCode",{parentName:"h4"},"ignores"),": ",(0,o.kt)("a",{parentName:"h4",href:"#bettererconfigignores"},(0,o.kt)("inlineCode",{parentName:"a"},"BettererConfigIgnores"))," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"[]"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The list of glob patterns to ignore from file watching for the current run.")),(0,o.kt)("h3",{id:"bettereroptionsstart"},(0,o.kt)("inlineCode",{parentName:"h3"},"BettererOptionsStart")),(0,o.kt)("p",null,"Options object for a ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," run in default mode. It will be validated by ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," and turned into a ",(0,o.kt)("a",{parentName:"p",href:"#bettererconfig"},(0,o.kt)("inlineCode",{parentName:"a"},"BettererConfig")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererOptionsStart = BettererOptionsBase &\n  Partial<{\n    ci: boolean;\n    excludes: Array<string | RegExp> | string;\n    includes: Array<string> | string;\n    strict: boolean;\n    update: boolean;\n  }>;\n")),(0,o.kt)("p",null,"All the ",(0,o.kt)("a",{parentName:"p",href:"#base-options"},(0,o.kt)("inlineCode",{parentName:"a"},"base options"))," above as well as:"),(0,o.kt)("h4",{id:"ci-boolean-default-false"},(0,o.kt)("inlineCode",{parentName:"h4"},"ci"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"boolean")," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"false"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"When set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,o.kt)("a",{parentName:"p",href:"./running-betterer#ci-mode-run-your-tests-and-throw-on-changes"},"CI mode")," is enabled. In ","[CI mode]"," ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," will throw an error if there is any difference between the test results and the expected results.")),(0,o.kt)("h4",{id:"excludes-arraystring--regexp--string-default-"},(0,o.kt)("inlineCode",{parentName:"h4"},"excludes"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"Array<string | RegExp> | string")," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"[]"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The list of filters to exclude files for the current run. Each file path declared by the ",(0,o.kt)("a",{parentName:"p",href:"#includes-arraystring--string-default-"},(0,o.kt)("inlineCode",{parentName:"a"},"includes"))," patterns will be matched against these patterns.")),(0,o.kt)("h4",{id:"includes-arraystring--string-default-"},(0,o.kt)("inlineCode",{parentName:"h4"},"includes"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"Array<string> | string")," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"[]"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The list of globs to select files for the current run. The expanded list of file paths will be fiiltered by ",(0,o.kt)("a",{parentName:"p",href:"#excludes-arraystring--regexp--string-default-"},(0,o.kt)("inlineCode",{parentName:"a"},"excludes")),".")),(0,o.kt)("h4",{id:"strict-boolean-default-false"},(0,o.kt)("inlineCode",{parentName:"h4"},"strict"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"boolean")," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"false"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"When set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,o.kt)("a",{parentName:"p",href:"./running-betterer#ci-mode-run-your-tests-and-throw-on-changes"},"Strict mode")," is enabled. In ","[strict mode]"," ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," will throw an error if there is any difference between the test results and the expected results. Set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," when ",(0,o.kt)("inlineCode",{parentName:"p"},"ci")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,o.kt)("h4",{id:"update-boolean-default-false"},(0,o.kt)("inlineCode",{parentName:"h4"},"update"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"boolean")," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"false"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"When set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," will ",(0,o.kt)("a",{parentName:"p",href:"./updating-results"},"update the results file"),", even if things get worse. Set to ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," when ",(0,o.kt)("inlineCode",{parentName:"p"},"ci")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"strict")," are ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,o.kt)("h3",{id:"bettereroptionswatch"},(0,o.kt)("inlineCode",{parentName:"h3"},"BettererOptionsWatch")),(0,o.kt)("p",null,"Options object for a ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," run in Watch mode. Will be parsed into a ",(0,o.kt)("a",{parentName:"p",href:"#bettererconfig"},(0,o.kt)("inlineCode",{parentName:"a"},"BettererConfig")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export type BettererOptionsWatch = BettererOptionsRunner &\n  Partial<{\n    watch: true;\n  }>;\n")),(0,o.kt)("p",null,"All the ",(0,o.kt)("a",{parentName:"p",href:"#base-options"},(0,o.kt)("inlineCode",{parentName:"a"},"base options"))," above as well as:"),(0,o.kt)("h4",{id:"ignores-bettererconfigignores-default--1"},(0,o.kt)("inlineCode",{parentName:"h4"},"ignores"),": ",(0,o.kt)("a",{parentName:"h4",href:"./config#bettererconfigignores"},(0,o.kt)("inlineCode",{parentName:"a"},"BettererConfigIgnores"))," (default: ",(0,o.kt)("inlineCode",{parentName:"h4"},"[]"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The list of glob patterns to ignore from file watching for the current run.")),(0,o.kt)("h4",{id:"watch-true"},(0,o.kt)("inlineCode",{parentName:"h4"},"watch"),": ",(0,o.kt)("inlineCode",{parentName:"h4"},"true")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Must be set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,o.kt)("a",{parentName:"p",href:"./running-betterer#watch-mode-run-your-tests-when-files-change"},"Watch mode"),". In ","[Watch mode]"," ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," will run your tests any time a file changes.")),(0,o.kt)("h2",{id:"bettererconfig"},(0,o.kt)("inlineCode",{parentName:"h2"},"BettererConfig")),(0,o.kt)("p",null,"A validated configuration object for a ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfig = {\n  ci: boolean;\n  configPaths: BettererConfigPaths;\n  cwd: string;\n  filePaths: BettererConfigPaths;\n  filters: BettererConfigFilters;\n  ignores: BettererConfigIgnores;\n  reporters: BettererConfigReporters;\n  resultsPath: string;\n  silent: boolean;\n  strict: boolean;\n  tsconfigPath: string | null;\n  update: boolean;\n  watch: boolean;\n};\n")),(0,o.kt)("h2",{id:"bettererconfigfilters"},(0,o.kt)("inlineCode",{parentName:"h2"},"BettererConfigFilters")),(0,o.kt)("p",null,"A list of ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"},"regular expressions")," to filter which tests to run."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfigFilters = ReadonlyArray<RegExp>;\n")),(0,o.kt)("h2",{id:"bettererconfigignores"},(0,o.kt)("inlineCode",{parentName:"h2"},"BettererConfigIgnores")),(0,o.kt)("p",null,"A list of ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/glob#glob-primer"},"glob patterns")," to ignore from file watching."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfigIgnores = ReadonlyArray<string>;\n")),(0,o.kt)("h2",{id:"bettererconfigpaths"},(0,o.kt)("inlineCode",{parentName:"h2"},"BettererConfigPaths")),(0,o.kt)("p",null,"A list of ",(0,o.kt)("a",{parentName:"p",href:"./test-definition-file"},"test definition file paths")," containing ",(0,o.kt)("strong",{parentName:"p"},"Betterer")," tests."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfigPaths = ReadonlyArray<string>;\n")),(0,o.kt)("h2",{id:"bettererconfigreporter"},(0,o.kt)("inlineCode",{parentName:"h2"},"BettererConfigReporter")),(0,o.kt)("p",null,"A path to a module that exports a ",(0,o.kt)("a",{parentName:"p",href:"./reporter#bettererreporter"},(0,o.kt)("inlineCode",{parentName:"a"},"BettererReporter"))," or an inline ",(0,o.kt)("a",{parentName:"p",href:"./reporter#bettererreporter"},(0,o.kt)("inlineCode",{parentName:"a"},"BettererReporter")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfigReporter = string | BettererReporter;\n")),(0,o.kt)("h2",{id:"bettererconfigreporters"},(0,o.kt)("inlineCode",{parentName:"h2"},"BettererConfigReporters")),(0,o.kt)("p",null,"A list of ",(0,o.kt)("a",{parentName:"p",href:"#bettererconfigreporter"},(0,o.kt)("inlineCode",{parentName:"a"},"BettererConfigReporter")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererConfigReporter = ReadonlyArray<BettererConfigReporter>;\n")))}u.isMDXComponent=!0}}]);