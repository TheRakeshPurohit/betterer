(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[346],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=s,f=d["".concat(o,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:s,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8215:function(e,t,n){"use strict";var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,s=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:s},t)}},1395:function(e,t,n){"use strict";n.d(t,{Z:function(){return c}});var r=n(7294),s=n(944),a=n(6010),i="tabItem_1uMI",l="tabItemActive_2DSg";var o=37,u=39;var c=function(e){var t=e.lazy,n=e.block,c=e.defaultValue,p=e.values,d=e.groupId,m=e.className,f=(0,s.Z)(),b=f.tabGroupChoices,g=f.setTabGroupChoices,h=(0,r.useState)(c),v=h[0],T=h[1],k=r.Children.toArray(e.children),y=[];if(null!=d){var w=b[d];null!=w&&w!==v&&p.some((function(e){return e.value===w}))&&T(w)}var N=function(e){var t=e.currentTarget,n=y.indexOf(t),r=p[n].value;T(r),null!=d&&(g(d,r),setTimeout((function(){var e,n,r,s,a,i,o,u;(e=t.getBoundingClientRect(),n=e.top,r=e.left,s=e.bottom,a=e.right,i=window,o=i.innerHeight,u=i.innerWidth,n>=0&&a<=u&&s<=o&&r>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(l),setTimeout((function(){return t.classList.remove(l)}),2e3))}),150))},B=function(e){var t,n;switch(e.keyCode){case u:var r=y.indexOf(e.target)+1;n=y[r]||y[0];break;case o:var s=y.indexOf(e.target)-1;n=y[s]||y[y.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},m)},p.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,className:(0,a.Z)("tabs__item",i,{"tabs__item--active":v===t}),key:t,ref:function(e){return y.push(e)},onKeyDown:B,onFocus:N,onClick:N},n)}))),t?(0,r.cloneElement)(k.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==v})}))))}},9443:function(e,t,n){"use strict";var r=(0,n(7294).createContext)(void 0);t.Z=r},944:function(e,t,n){"use strict";var r=n(7294),s=n(9443);t.Z=function(){var e=(0,r.useContext)(s.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},2440:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return u},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=n(2122),s=n(9756),a=(n(7294),n(3905)),i=n(1395),l=n(8215),o=["components"],u={id:"tests",title:"Tests",sidebar_label:"Tests",slug:"/tests"},c={unversionedId:"tests",id:"tests",isDocsHomePage:!1,title:"Tests",description:"A Betterer test is a programmatic definition of something that you want to improve in your codebase. Typically this will either be something that is measured across the entire codebase (e.g. code coverage, or number of tests, or a specific performance metric), or something that is measured on a per-file basis (e.g. type checking, or linting).",source:"@site/docs/tests.md",sourceDirName:".",slug:"/tests",permalink:"/betterer/docs/tests",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/tests.md",version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1614393388,formattedLastUpdatedAt:"2/27/2021",sidebar_label:"Tests",frontMatter:{id:"tests",title:"Tests",sidebar_label:"Tests",slug:"/tests"},sidebar:"docs",previous:{title:"Test definition file",permalink:"/betterer/docs/test-definition-file"},next:{title:"Results file",permalink:"/betterer/docs/results-file"}},p=[{value:"Basic test",id:"basic-test",children:[]},{value:"Test goal",id:"test-goal",children:[]},{value:"Test deadline",id:"test-deadline",children:[]},{value:"File test",id:"file-test",children:[]},{value:"Complex test",id:"complex-test",children:[]}],d={toc:p};function m(e){var t=e.components,n=(0,s.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"Betterer")," test is a programmatic definition of something that you want to improve in your codebase. Typically this will either be something that is measured ",(0,a.kt)("em",{parentName:"p"},"across the entire codebase")," (e.g. code coverage, or number of tests, or a specific performance metric), or something that is measured ",(0,a.kt)("em",{parentName:"p"},"on a per-file basis")," (e.g. type checking, or linting)."),(0,a.kt)("p",null,"Tests are defined as code and can be re-used and shared with other projects. ",(0,a.kt)("strong",{parentName:"p"},"Betterer")," even comes with a few ",(0,a.kt)("a",{parentName:"p",href:"./built-in-tests"},"built-in tests"),"."),(0,a.kt)("h2",{id:"basic-test"},"Basic test"),(0,a.kt)("p",null,"The most basic test you can write checks if a number grows or shrinks:"),(0,a.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { bigger, smaller } from '@betterer/constraints';\n\nexport default {\n  'should grow': {\n    test: () => getNumberOfTests(),\n    constraint: bigger\n  },\n  'should shrink': {\n    test: () => getBundleSize(),\n    constraint: smaller\n  }\n};\n\nfunction getNumberOfTests(): number {\n  // ...\n}\n\nfunction getBundleSize(): number {\n  // ...\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { bigger, smaller } = require('@betterer/constraints');\n\nmodule.exports = {\n  'should grow': {\n    test: () => getNumberOfTests(),\n    constraint: bigger\n  },\n  'should shrink': {\n    test: () => getBundleSize(),\n    constraint: smaller\n  }\n};\n\nfunction getNumberOfTests() {\n  // ...\n}\n\nfunction getBundleSize() {\n  // ...\n}\n")))),(0,a.kt)("p",null,"Most of the time you should wrap your test in a ",(0,a.kt)("a",{parentName:"p",href:"./betterer-test#betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest")),". This adds a few nice helpers like ",(0,a.kt)("inlineCode",{parentName:"p"},"only()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"skip()"),"."),(0,a.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { BettererTest } from '@betterer/betterer';\nimport { bigger, smaller } from '@betterer/constraints';\n\nexport default {\n  'should grow': new BettererTest({\n    test: () => getNumberOfTests(),\n    constraint: bigger\n  }).only(),\n  'should shrink': new BettererTest({\n    test: () => getBundleSize(),\n    constraint: smaller\n  }).skip()\n};\n\nfunction getNumberOfTests(): number {\n  // ...\n}\n\nfunction getBundleSize(): number {\n  // ...\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { BettererTest } = require('@betterer/betterer');\nconst { bigger, smaller } = require('@betterer/constraints');\n\nmodule.exports = {\n  'should grow': new BettererTest({\n    test: () => getNumberOfTests(),\n    constraint: bigger\n  }).only(),\n  'should shrink': new BettererTest({\n    test: () => getBundleSize(),\n    constraint: smaller\n  }).skip()\n};\n\nfunction getNumberOfTests() {\n  // ...\n}\n\nfunction getBundleSize() {\n  // ...\n}\n")))),(0,a.kt)("h2",{id:"test-goal"},"Test goal"),(0,a.kt)("p",null,'You can add a goal to your test, which can be a function or a value. Once the goal is met, the test will be marked as "completed":'),(0,a.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { BettererTest } from '@betterer/betterer';\nimport { bigger, smaller } from '@betterer/constraints';\n\nexport default {\n  'should grow': new BettererTest({\n    test: () => getNumberOfTests(),\n    constraint: bigger,\n    goal: (value: number) => value > 1000\n  }).only(),\n  'should shrink': new BettererTest({\n    test: () => getBundleSize(),\n    constraint: smaller,\n    goal: 5\n  }).skip()\n};\n\nfunction getNumberOfTests(): number {\n  // ...\n}\n\nfunction getBundleSize(): number {\n  // ...\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { BettererTest } = require('@betterer/betterer');\nconst { bigger, smaller } = require('@betterer/constraints');\n\nmodule.exports = {\n  'should grow': new BettererTest({\n    test: () => getNumberOfTests(),\n    constraint: bigger,\n    goal: (value) => value > 1000\n  }).only(),\n  'should shrink': new BettererTest({\n    test: () => getBundleSize(),\n    constraint: smaller,\n    goal: 5\n  }).skip()\n};\n\nfunction getNumberOfTests() {\n  // ...\n}\n\nfunction getBundleSize() {\n  // ...\n}\n")))),(0,a.kt)("h2",{id:"test-deadline"},"Test deadline"),(0,a.kt)("p",null,"You can add a deadline to your test, which can be a ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},(0,a.kt)("inlineCode",{parentName:"a"},"Date")," object"),", or a valid ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#parameters"},(0,a.kt)("inlineCode",{parentName:"a"},"Date")," string"),'. Once the deadline is passed, the test will be marked as "expired":'),(0,a.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { BettererTest } from '@betterer/betterer';\nimport { bigger, smaller } from '@betterer/constraints';\n\nexport default {\n  'should grow': new BettererTest({\n    test: () => getNumberOfTests(),\n    constraint: bigger,\n    deadline: new Date('2021/07/03')\n  }),\n  'should shrink': new BettererTest({\n    test: () => getBundleSize(),\n    constraint: smaller,\n    deadline: '2021/07/03'\n  })\n};\n\nfunction getNumberOfTests(): number {\n  // ...\n}\n\nfunction getBundleSize(): number {\n  // ...\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { BettererTest } = require('@betterer/betterer');\nconst { bigger, smaller } = require('@betterer/constraints');\n\nmodule.exports = {\n  'should grow': new BettererTest({\n    test: () => getNumberOfTests(),\n    constraint: bigger,\n    deadline: new Date('2021/07/03')\n  }).only(),\n  'should shrink': new BettererTest({\n    test: () => getBundleSize(),\n    constraint: smaller,\n    deadline: '2021/07/03'\n  }).skip()\n};\n\nfunction getNumberOfTests() {\n  // ...\n}\n\nfunction getBundleSize() {\n  // ...\n}\n")))),(0,a.kt)("h2",{id:"file-test"},"File test"),(0,a.kt)("p",null,"If you want to write a test that checks individual files, you can write a ",(0,a.kt)("a",{parentName:"p",href:"./betterer-file-test#bettererfiletest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererFileTest")),":"),(0,a.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { BettererFileResolver, BettererFileTest } from '@betterer/betterer';\n\nexport default {\n  'no more JavaScript files': countFiles('no more JavaScript files!').include('**/*.js')\n};\n\nfunction countFiles(issue: string) {\n  const resolver = new BettererFileResolver();\n  return new BettererFileTest(resolver, async (filePaths, fileTestResult) => {\n    filePaths.forEach((filePath) => {\n      // In this case the file contents don't matter:\n      const file = fileTestResult.addFile(filePath, '');\n      // Add the issue to the first character of the file:\n      file.addIssue(0, 0, issue);\n    });\n  });\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { BettererFileResolver, BettererFileTest } = require('@betterer/betterer');\n\nmodule.exports = {\n  'no more JavaScript': countFiles('no more JavaScript files!').include('**/*.js')\n};\n\nfunction countFiles(issue) {\n  const resolver = new BettererFileResolver();\n  return new BettererFileTest(resolver, async (filePaths, fileTestResult) => {\n    filePaths.forEach((filePath) => {\n      // In this case the file contents don't matter:\n      const file = fileTestResult.addFile(filePath, '');\n      // Add the issue to the first character of the file:\n      file.addIssue(0, 0, issue);\n    });\n  });\n}\n")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./betterer-file-test"},"Full ",(0,a.kt)("inlineCode",{parentName:"a"},"BettererFileTest")," API"))),(0,a.kt)("h2",{id:"complex-test"},"Complex test"),(0,a.kt)("p",null,"If you want to do more fancy custom things, you can have complete control over ",(0,a.kt)("a",{parentName:"p",href:"./betterer-test#betterertestconstraint"},"constraints"),", ",(0,a.kt)("a",{parentName:"p",href:"./betterer-test#bettererdiffer"},"diffing"),", ",(0,a.kt)("a",{parentName:"p",href:"./betterer-test#bettererserialiser"},"serialising/deserialising")," and ",(0,a.kt)("a",{parentName:"p",href:"./betterer-test#bettererprinter"},"printing"),"."),(0,a.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { BettererTest } from '@betterer/betterer';\nimport { BettererConstraintResult } from '@betterer/constraints';\n\ntype AccessibilityReport = {\n  warnings: Array<string>;\n  errors: Array<string>;\n};\n\nexport default {\n  'should be accessible': new BettererTest<AccessibilityReport>({\n    test: accessibilityTest,\n    constraint: accessibilityConstraint\n  })\n};\n\nfunction accessibilityTest(): AccessibilityReport {\n  // ...\n}\n\nfunction accessibilityConstraint(result: AccessibilityReport, expected: AccessibilityReport): BettererConstraintResult {\n  if (result.errors > expected.errors || result.warnings > expected.warnings) {\n    return BettererConstraintResult.worse;\n  }\n  if (result.errors < expected.errors || result.warnings < expected.warnings) {\n    return BettererConstraintResult.better;\n  }\n  return BettererConstraintResult.same;\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { BettererTest } = require('@betterer/betterer');\nconst { BettererConstraintResult } = require('@betterer/constraints');\n\nmodule.exports = {\n  'should be accessible': new BettererTest({\n    test: accessibilityTest,\n    constraint: accessibilityConstraint\n  })\n};\n\nfunction accessibilityTest() {\n  // ...\n}\n\nfunction accessibilityConstraint(result, expected) {\n  if (result.errors > expected.errors || result.warnings > expected.warnings) {\n    return BettererConstraintResult.worse;\n  }\n  if (result.errors < expected.errors || result.warnings < expected.warnings) {\n    return BettererConstraintResult.better;\n  }\n  return BettererConstraintResult.same;\n}\n")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./betterer-test"},"Full ",(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest")," API"))))}m.isMDXComponent=!0},6010:function(e,t,n){"use strict";function r(e){var t,n,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(s&&(s+=" "),s+=n);else for(t in e)e[t]&&(s&&(s+=" "),s+=t);return s}function s(){for(var e,t,n=0,s="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(s&&(s+=" "),s+=t);return s}n.d(t,{Z:function(){return s}})}}]);