(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[23],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,b=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return r?n.createElement(b,l(l({ref:t},u),{},{components:r})):n.createElement(b,l({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6638:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),l=["components"],o={id:"constraints",title:"Betterer contraints",sidebar_label:"Betterer contraints",slug:"/constraints"},s={unversionedId:"api/constraints",id:"api/constraints",isDocsHomePage:!1,title:"Betterer contraints",description:"BettererConstraintResult",source:"@site/docs/api/constraints.md",sourceDirName:"api",slug:"/constraints",permalink:"/betterer/docs/constraints",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/constraints.md",version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1614393388,formattedLastUpdatedAt:"2/27/2021",sidebar_label:"Betterer contraints",frontMatter:{id:"constraints",title:"Betterer contraints",sidebar_label:"Betterer contraints",slug:"/constraints"},sidebar:"api",previous:{title:"Betterer File Test",permalink:"/betterer/docs/betterer-file-test"},next:{title:"Betterer errors",permalink:"/betterer/docs/errors"}},c=[{value:"<code>BettererConstraintResult</code>",id:"bettererconstraintresult",children:[]},{value:"<code>bigger()</code>",id:"bigger",children:[]},{value:"<code>smaller()</code>",id:"smaller",children:[]}],u={toc:c};function p(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"bettererconstraintresult"},(0,i.kt)("inlineCode",{parentName:"h2"},"BettererConstraintResult")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"enum BettererConstraintResult {\n  better = 'better',\n  same = 'same',\n  worse = 'worse'\n}\n")),(0,i.kt)("h2",{id:"bigger"},(0,i.kt)("inlineCode",{parentName:"h2"},"bigger()")),(0,i.kt)("p",null,"Check if one value is bigger than another:"),(0,i.kt)("p",null,"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { bigger } from '@betterer/constraints';\n\nbigger(1, 2); // worse\nbigger(1, 1); // worse\nbigger(2, 1); // better\nbigger(2, 2); // same\n")),(0,i.kt)("p",null,"Args:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"result"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"number")," - The current value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"expected"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"number")," - The expected value")),(0,i.kt)("p",null,"Returns: ",(0,i.kt)("a",{parentName:"p",href:"#bettererconstraintresult"},(0,i.kt)("inlineCode",{parentName:"a"},"BettererConstraintResult"))),(0,i.kt)("h2",{id:"smaller"},(0,i.kt)("inlineCode",{parentName:"h2"},"smaller()")),(0,i.kt)("p",null,"Check if one value is smaller than another:"),(0,i.kt)("p",null,"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { smaller } from '@betterer/constraints';\n\nsmaller(2, 1); // worse\nsmaller(1, 1); // worse\nsmaller(1, 2); // better\nsmaller(2, 2); // same\n")),(0,i.kt)("p",null,"Args:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"result"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"number")," - The current value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"expected"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"number")," - The expected value")),(0,i.kt)("p",null,"Returns: ",(0,i.kt)("a",{parentName:"p",href:"#bettererconstraintresult"},(0,i.kt)("inlineCode",{parentName:"a"},"BettererConstraintResult"))))}p.isMDXComponent=!0}}]);