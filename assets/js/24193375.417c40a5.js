(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[565],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=l(r),d=a,k=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return r?n.createElement(k,s(s({ref:t},c),{},{components:r})):n.createElement(k,s({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6474:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return l},default:function(){return u}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),s=["components"],o={id:"built-in-tests",title:"Built-in Tests",slug:"/built-in-tests"},p={unversionedId:"built-in-tests",id:"built-in-tests",isDocsHomePage:!1,title:"Built-in Tests",description:"Betterer ships several built-in tests to get you started. Check out the implementations for some more inspiration for your own tests!",source:"@site/docs/built-in-tests.md",sourceDirName:".",slug:"/built-in-tests",permalink:"/betterer/docs/built-in-tests",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/built-in-tests.md",version:"current",lastUpdatedBy:"Pavlos Vinieratos",lastUpdatedAt:1618955206,formattedLastUpdatedAt:"4/20/2021",frontMatter:{id:"built-in-tests",title:"Built-in Tests",slug:"/built-in-tests"},sidebar:"docs",previous:{title:"Development workflow",permalink:"/betterer/docs/development-workflow"}},l=[{value:"@betterer/eslint",id:"betterereslint",children:[]},{value:"@betterer/regexp",id:"bettererregexp",children:[]},{value:"@betterer/stylelint",id:"bettererstylelint",children:[]},{value:"@betterer/tsquery",id:"betterertsquery",children:[]},{value:"@betterer/typescript",id:"betterertypescript",children:[]}],c={toc:l};function u(e){var t=e.components,r=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Betterer")," ships several built-in tests to get you started. Check out the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer/blob/master/packages/eslint/src/eslint.ts"},"implementations")," for some more ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer/blob/master/packages/typescript/src/typescript.ts"},"inspiration")," for your own tests!"),(0,i.kt)("h3",{id:"betterereslint"},(0,i.kt)("a",{parentName:"h3",href:"https://www.npmjs.com/package/@betterer/eslint"},(0,i.kt)("inlineCode",{parentName:"a"},"@betterer/eslint"))),(0,i.kt)("p",null,"Use this test to incrementally introduce new ",(0,i.kt)("a",{parentName:"p",href:"https://eslint.org/"},(0,i.kt)("strong",{parentName:"a"},"ESLint"))," rules to your codebase. You can pass as many ",(0,i.kt)("strong",{parentName:"p"},"ESLint")," ",(0,i.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/"},"rule configurations")," as you like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { eslint } from '@betterer/eslint';\n\nexport default {\n  'no more debuggers': eslint({ 'no-debugger': 'error' }).include('./src/**/*.ts')\n};\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@betterer/eslint")," is a ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test"},"BettererFileTest"),", so you can use ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test#include"},(0,i.kt)("inlineCode",{parentName:"a"},"include")),", ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test#exclude"},(0,i.kt)("inlineCode",{parentName:"a"},"exclude")),", ",(0,i.kt)("a",{parentName:"p",href:"betterer-test#only"},(0,i.kt)("inlineCode",{parentName:"a"},"only")),", and ",(0,i.kt)("a",{parentName:"p",href:"betterer-test#skip"},(0,i.kt)("inlineCode",{parentName:"a"},"skip")),"."),(0,i.kt)("h3",{id:"bettererregexp"},(0,i.kt)("a",{parentName:"h3",href:"https://www.npmjs.com/package/@betterer/regexp"},(0,i.kt)("inlineCode",{parentName:"a"},"@betterer/regexp"))),(0,i.kt)("p",null,"Use this test to incrementally remove ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"},(0,i.kt)("strong",{parentName:"a"},"RegExp"))," matches from your codebase."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { regexp } from '@betterer/regexp';\n\nexport default {\n  'no hack comments': regexp(/(\\/\\/\\s*HACK)/i).include('**/*.ts')\n};\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@betterer/regexp")," is a ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test"},"BettererFileTest"),", so you can use ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test#include"},(0,i.kt)("inlineCode",{parentName:"a"},"include")),", ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test#exclude"},(0,i.kt)("inlineCode",{parentName:"a"},"exclude")),", ",(0,i.kt)("a",{parentName:"p",href:"betterer-test#only"},(0,i.kt)("inlineCode",{parentName:"a"},"only")),", and ",(0,i.kt)("a",{parentName:"p",href:"betterer-test#skip"},(0,i.kt)("inlineCode",{parentName:"a"},"skip")),"."),(0,i.kt)("h3",{id:"bettererstylelint"},(0,i.kt)("a",{parentName:"h3",href:"https://www.npmjs.com/package/@betterer/stylelint"},(0,i.kt)("inlineCode",{parentName:"a"},"@betterer/stylelint"))),(0,i.kt)("p",null,"Use this test to incrementally introduce new ",(0,i.kt)("a",{parentName:"p",href:"https://stylelint.io/"},(0,i.kt)("strong",{parentName:"a"},"Stylelint"))," rules to your codebase."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { stylelint } from '@betterer/stylelint';\n\nexport default {\n  'no unknown units': stylelint({\n    rules: {\n      'unit-no-unknown': true\n    }\n  }).include('**/*.css)\n};\n")),(0,i.kt)("h3",{id:"betterertsquery"},(0,i.kt)("a",{parentName:"h3",href:"https://www.npmjs.com/package/@betterer/tsquery"},(0,i.kt)("inlineCode",{parentName:"a"},"@betterer/tsquery"))),(0,i.kt)("p",null,"Use this test to incrementally remove ",(0,i.kt)("strong",{parentName:"p"},"TSQuery")," matches from your codebase. See the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/tsquery"},(0,i.kt)("strong",{parentName:"a"},"TSQuery")," documentation")," for more details about the query syntax."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { tsquery } from '@betterer/tsquery';\n\nexport default {\n  'no raw console.log': tsquery(\n    './tsconfig.json',\n    'CallExpression > PropertyAccessExpression[expression.name=\"console\"][name.name=\"log\"]'\n  )\n};\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@betterer/tsquery")," is a ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test"},"BettererFileTest"),", so you can use ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test#include"},(0,i.kt)("inlineCode",{parentName:"a"},"include")),", ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test#exclude"},(0,i.kt)("inlineCode",{parentName:"a"},"exclude")),", ",(0,i.kt)("a",{parentName:"p",href:"betterer-test#only"},(0,i.kt)("inlineCode",{parentName:"a"},"only")),", and ",(0,i.kt)("a",{parentName:"p",href:"betterer-test#skip"},(0,i.kt)("inlineCode",{parentName:"a"},"skip")),"."),(0,i.kt)("h3",{id:"betterertypescript"},(0,i.kt)("a",{parentName:"h3",href:"https://www.npmjs.com/package/@betterer/typescript"},(0,i.kt)("inlineCode",{parentName:"a"},"@betterer/typescript"))),(0,i.kt)("p",null,"Use this test to incrementally introduce ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/compiler-options.html"},(0,i.kt)("strong",{parentName:"a"},"TypeScript")," configuration")," to your codebase."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { typescript } from '@betterer/typescript';\n\nexport default {\n  'stricter compilation': typescript('./tsconfig.json', {\n    strict: true\n  })\n};\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@betterer/typescript")," is a ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test"},"BettererFileTest"),", so you can use ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test#include"},(0,i.kt)("inlineCode",{parentName:"a"},"include")),", ",(0,i.kt)("a",{parentName:"p",href:"./betterer-file-test#exclude"},(0,i.kt)("inlineCode",{parentName:"a"},"exclude")),", ",(0,i.kt)("a",{parentName:"p",href:"betterer-test#only"},(0,i.kt)("inlineCode",{parentName:"a"},"only")),", and ",(0,i.kt)("a",{parentName:"p",href:"betterer-test#skip"},(0,i.kt)("inlineCode",{parentName:"a"},"skip")),"."))}u.isMDXComponent=!0}}]);