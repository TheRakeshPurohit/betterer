"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[250],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,f=c["".concat(u,".").concat(m)]||c[m]||d[m]||i;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},3558:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],o={id:"runner",title:"Betterer Runner",sidebar_label:"Betterer Runner",slug:"/runner"},u=void 0,p={unversionedId:"api/runner",id:"api/runner",isDocsHomePage:!1,title:"Betterer Runner",description:"BettererFilePaths",source:"@site/docs/api/runner.md",sourceDirName:"api",slug:"/runner",permalink:"/betterer/docs/runner",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/runner.md",version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1614393388,formattedLastUpdatedAt:"2/27/2021",frontMatter:{id:"runner",title:"Betterer Runner",sidebar_label:"Betterer Runner",slug:"/runner"},sidebar:"api",previous:{title:"Betterer Result",permalink:"/betterer/docs/results"},next:{title:"Betterer Test",permalink:"/betterer/docs/betterer-test"}},s=[{value:"<code>BettererFilePaths</code>",id:"bettererfilepaths",children:[]},{value:"<code>BettererRunner</code>",id:"bettererrunner",children:[{value:"Methods",id:"methods",children:[]},{value:"<code>queue()</code>",id:"queue",children:[]},{value:"<code>stop()</code>",id:"stop",children:[]}]},{value:"<code>BettererRunHandler</code>",id:"bettererrunhandler",children:[]}],d={toc:s};function c(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"bettererfilepaths"},(0,i.kt)("inlineCode",{parentName:"h2"},"BettererFilePaths")),(0,i.kt)("p",null,"A list of file paths."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererFilePaths = ReadonlyArray<string>;\n")),(0,i.kt)("h2",{id:"bettererrunner"},(0,i.kt)("inlineCode",{parentName:"h2"},"BettererRunner")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererRunner = {\n  queue(filePaths?: BettererFilePaths, handler?: BettererRunHandler): Promise<void>;\n  stop(force: true): Promise<BettererSummary | null>;\n  stop(): Promise<BettererSummary>;\n};\n")),(0,i.kt)("h3",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"queue"},(0,i.kt)("inlineCode",{parentName:"h3"},"queue()")),(0,i.kt)("p",null,"Queue a ",(0,i.kt)("strong",{parentName:"p"},"Betterer")," test run on a given set of files. Multiple calls will be debounced."),(0,i.kt)("p",null,"Args:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filePaths?"),": ",(0,i.kt)("a",{parentName:"li",href:"#bettererfilepaths"},(0,i.kt)("inlineCode",{parentName:"a"},"BettererFilePaths"))," - List of files to test with ",(0,i.kt)("strong",{parentName:"li"},"Betterer"),". If ",(0,i.kt)("inlineCode",{parentName:"li"},"filePaths")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined")," then all files will be tested."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handler?"),": ",(0,i.kt)("a",{parentName:"li",href:"#bettererrunhandler"},(0,i.kt)("inlineCode",{parentName:"a"},"BettererRunHandler"))," - Callback to run when the queued run is complete.")),(0,i.kt)("p",null,"Returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<void>")),(0,i.kt)("h3",{id:"stop"},(0,i.kt)("inlineCode",{parentName:"h3"},"stop()")),(0,i.kt)("p",null,"Stop the runner, and return the most recent ",(0,i.kt)("a",{parentName:"p",href:"./context#betterersummary"},(0,i.kt)("inlineCode",{parentName:"a"},"BettererSummary"))," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," if a run hasn't finished yet`)."),(0,i.kt)("p",null,"Args:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"force?"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," - If ",(0,i.kt)("inlineCode",{parentName:"li"},"force")," is passed, the ",(0,i.kt)("strong",{parentName:"li"},"Betterer")," run will be stopped and any errors will be ignored.")),(0,i.kt)("p",null,"Returns: ",(0,i.kt)("a",{parentName:"p",href:"./context#betterersummary"},(0,i.kt)("inlineCode",{parentName:"a"},"Promise<BettererSummary>"))),(0,i.kt)("h2",{id:"bettererrunhandler"},(0,i.kt)("inlineCode",{parentName:"h2"},"BettererRunHandler")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type BettererRunHandler = (summary: BettererSummary) => void;\n")),(0,i.kt)("p",null,"Args:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"summary"),": ",(0,i.kt)("a",{parentName:"li",href:"./context#betterersummary"},(0,i.kt)("inlineCode",{parentName:"a"},"BettererSummary"))," - The summary of the completed run.")),(0,i.kt)("p",null,"Returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"void")))}c.isMDXComponent=!0}}]);