(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{115:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function b(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){b(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},b=Object.keys(e);for(n=0;n<b.length;n++)r=b[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)r=b[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),s=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=s(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,b=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(r),d=n,m=p["".concat(i,".").concat(d)]||p[d]||u[d]||b;return r?a.a.createElement(m,l(l({ref:t},c),{},{components:r})):a.a.createElement(m,l({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=r.length,i=new Array(b);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<b;c++)i[c]=r[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},93:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return l})),r.d(t,"toc",(function(){return o})),r.d(t,"default",(function(){return s}));var n=r(3),a=r(7),b=(r(0),r(115)),i={id:"context",title:"Betterer Context",sidebar_label:"Betterer Context",slug:"/context"},l={unversionedId:"api/context",id:"api/context",isDocsHomePage:!1,title:"Betterer Context",description:"BettererContext",source:"@site/docs/api/context.md",slug:"/context",permalink:"/betterer/docs/context",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/context.md",version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1614387423,sidebar_label:"Betterer Context",sidebar:"api",previous:{title:"Betterer Configuration",permalink:"/betterer/docs/config"},next:{title:"Betterer Reporter",permalink:"/betterer/docs/reporter"}},o=[{value:"<code>BettererContext</code>",id:"betterercontext",children:[{value:"Properties",id:"properties",children:[]}]},{value:"<code>BettererDelta</code>",id:"bettererdelta",children:[{value:"Properties",id:"properties-1",children:[]}]},{value:"<code>BettererRun</code>",id:"bettererrun",children:[{value:"Properties",id:"properties-2",children:[]},{value:"State",id:"state",children:[]}]},{value:"<code>BettererRuns</code>",id:"bettererruns",children:[]},{value:"<code>BettererRunNames</code>",id:"bettererrunnames",children:[]},{value:"<code>BettererSummary</code>",id:"betterersummary",children:[{value:"Properties",id:"properties-3",children:[]},{value:"State",id:"state-1",children:[]}]},{value:"<code>BettererSummaries</code>",id:"betterersummaries",children:[]}],c={toc:o};function s(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h2",{id:"betterercontext"},Object(b.b)("inlineCode",{parentName:"h2"},"BettererContext")),Object(b.b)("p",null,"A ",Object(b.b)("inlineCode",{parentName:"p"},"BettererContext")," represents the lifecycle of a set of tests runs."),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererContext = {\n  readonly config: BettererConfig;\n  readonly lifecycle: Promise<BettererSummaries>;\n};\n")),Object(b.b)("h3",{id:"properties"},"Properties"),Object(b.b)("h4",{id:"config-bettererconfig"},Object(b.b)("inlineCode",{parentName:"h4"},"config"),": ",Object(b.b)("a",{parentName:"h4",href:"./config#bettererconfig"},Object(b.b)("inlineCode",{parentName:"a"},"BettererConfig"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The configuration for the current context")),Object(b.b)("h4",{id:"lifecycle-promisebetterersummaries"},Object(b.b)("inlineCode",{parentName:"h4"},"lifecycle"),": ",Object(b.b)("a",{parentName:"h4",href:"#betterersummaries"},Object(b.b)("inlineCode",{parentName:"a"},"Promise<BettererSummaries>"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"A promise that will resolve when the context ends.")),Object(b.b)("h2",{id:"bettererdelta"},Object(b.b)("inlineCode",{parentName:"h2"},"BettererDelta")),Object(b.b)("p",null,"A ",Object(b.b)("inlineCode",{parentName:"p"},"BettererDelta")," represents the change between a test runs and its baseline. A ",Object(b.b)("inlineCode",{parentName:"p"},"BettererRun")," has a ",Object(b.b)("inlineCode",{parentName:"p"},"delta")," property if the test has a ",Object(b.b)("a",{parentName:"p",href:"./betterer-test#bettererprogress"},Object(b.b)("inlineCode",{parentName:"a"},"progress"))," handler."),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererDelta =\n  | {\n      readonly baseline: number;\n      readonly diff: number;\n      readonly result: number;\n    }\n  | {\n      readonly baseline: null;\n      readonly diff: 0;\n      readonly result: number;\n    };\n")),Object(b.b)("h3",{id:"properties-1"},"Properties"),Object(b.b)("h4",{id:"baseline-number--null"},Object(b.b)("inlineCode",{parentName:"h4"},"baseline"),": ",Object(b.b)("inlineCode",{parentName:"h4"},"number | null")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The baseline for the current test. Set when the context is created and will be constant across multiple runs. Set to ",Object(b.b)("inlineCode",{parentName:"p"},"null")," when it is a new test.")),Object(b.b)("h4",{id:"diff-number--0"},Object(b.b)("inlineCode",{parentName:"h4"},"diff"),": ",Object(b.b)("inlineCode",{parentName:"h4"},"number | 0")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The diff between the current test result and the baseline. Set to ",Object(b.b)("inlineCode",{parentName:"p"},"0")," when it is a new test.")),Object(b.b)("h4",{id:"result-number"},Object(b.b)("inlineCode",{parentName:"h4"},"result"),": ",Object(b.b)("inlineCode",{parentName:"h4"},"number")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The current test result.")),Object(b.b)("h2",{id:"bettererrun"},Object(b.b)("inlineCode",{parentName:"h2"},"BettererRun")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererRun = {\n  readonly diff: BettererDiff;\n  readonly expected: BettererResult;\n  readonly filePaths: BettererFilePaths;\n  readonly lifecycle: Promise<void>;\n  readonly name: string;\n  readonly delta: BettererDelta | null;\n  readonly result: BettererResult;\n  readonly test: BettererTestConfig;\n  readonly timestamp: number;\n  readonly isBetter: boolean;\n  readonly isComplete: boolean;\n  readonly isExpired: boolean;\n  readonly isFailed: boolean;\n  readonly isNew: boolean;\n  readonly isObsolete: boolean;\n  readonly isSame: boolean;\n  readonly isSkipped: boolean;\n  readonly isUpdated: boolean;\n  readonly isWorse: boolean;\n};\n")),Object(b.b)("h3",{id:"properties-2"},"Properties"),Object(b.b)("h4",{id:"diff-bettererdiff"},Object(b.b)("inlineCode",{parentName:"h4"},"diff"),": ",Object(b.b)("a",{parentName:"h4",href:"./betterer-test#bettererdiff"},Object(b.b)("inlineCode",{parentName:"a"},"BettererDiff"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The verbose diff between the current test result and the expected reuslt.")),Object(b.b)("h4",{id:"expected-bettererresult"},Object(b.b)("inlineCode",{parentName:"h4"},"expected"),": ",Object(b.b)("a",{parentName:"h4",href:"./results#bettererresult"},Object(b.b)("inlineCode",{parentName:"a"},"BettererResult"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The expected result for this test run. Deserialised from the ",Object(b.b)("a",{parentName:"p",href:"./results-file"},"results file"),".")),Object(b.b)("h4",{id:"filepaths-bettererfilepaths"},Object(b.b)("inlineCode",{parentName:"h4"},"filePaths"),": ",Object(b.b)("a",{parentName:"h4",href:"./runner#bettererfilepaths"},Object(b.b)("inlineCode",{parentName:"a"},"BettererFilePaths"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of ","[",Object(b.b)("inlineCode",{parentName:"p"},"BettererFilePaths"),"]"," that are being tested.")),Object(b.b)("h4",{id:"lifecycle-promisevoid"},Object(b.b)("inlineCode",{parentName:"h4"},"lifecycle"),": ",Object(b.b)("inlineCode",{parentName:"h4"},"Promise<void>")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"A promise that will resolve when the test run ends.")),Object(b.b)("h4",{id:"name-string"},Object(b.b)("inlineCode",{parentName:"h4"},"name"),": ",Object(b.b)("inlineCode",{parentName:"h4"},"string")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The name of the run.")),Object(b.b)("h4",{id:"delta-bettererdelta--null"},Object(b.b)("inlineCode",{parentName:"h4"},"delta"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererdelta"},Object(b.b)("inlineCode",{parentName:"a"},"BettererDelta"))," | ",Object(b.b)("inlineCode",{parentName:"h4"},"null")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The change between a test runs and its baseline. A ",Object(b.b)("inlineCode",{parentName:"p"},"BettererRun")," has a ",Object(b.b)("inlineCode",{parentName:"p"},"delta")," property if the test has a ",Object(b.b)("a",{parentName:"p",href:"./betterer-test#bettererprogress"},Object(b.b)("inlineCode",{parentName:"a"},"progress"))," handler.")),Object(b.b)("h4",{id:"result-bettererresult"},Object(b.b)("inlineCode",{parentName:"h4"},"result"),": ",Object(b.b)("a",{parentName:"h4",href:"./results#bettererresult"},Object(b.b)("inlineCode",{parentName:"a"},"BettererResult"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The current result for this test run. Will be serialised to the ",Object(b.b)("a",{parentName:"p",href:"./results-file"},"results file"),".")),Object(b.b)("h4",{id:"test-betterertestconfig"},Object(b.b)("inlineCode",{parentName:"h4"},"test"),": ",Object(b.b)("a",{parentName:"h4",href:"./betterer-test#betterertestconfig"},Object(b.b)("inlineCode",{parentName:"a"},"BettererTestConfig"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The configuration for this test.")),Object(b.b)("h4",{id:"timestamp-number"},Object(b.b)("inlineCode",{parentName:"h4"},"timestamp"),": ",Object(b.b)("inlineCode",{parentName:"h4"},"number")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The time that the test started. Used for checking against a ",Object(b.b)("a",{parentName:"p",href:"./tests#test-deadline"},"test deadline"),".")),Object(b.b)("h3",{id:"state"},"State"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isBetter")," - ",Object(b.b)("inlineCode",{parentName:"li"},"result")," is better than ",Object(b.b)("inlineCode",{parentName:"li"},"expected"),"."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isComplete"),"- ",Object(b.b)("inlineCode",{parentName:"li"},"result")," has met the goal."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isExpired")," - the test has passed its deadline."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isFailed")," - the test threw an error."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isNew")," - the test was run for the first time."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isObsolete")," - the test is not run, but there is a saved expected result."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isSame")," - ",Object(b.b)("inlineCode",{parentName:"li"},"result")," is the same as ",Object(b.b)("inlineCode",{parentName:"li"},"expected")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isSkipped")," - the test was skipped"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isUpdated")," - the test result was updated"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isWorse")," - ",Object(b.b)("inlineCode",{parentName:"li"},"result")," is worse than `expected")),Object(b.b)("h2",{id:"bettererruns"},Object(b.b)("inlineCode",{parentName:"h2"},"BettererRuns")),Object(b.b)("p",null,"A list of ",Object(b.b)("a",{parentName:"p",href:"#bettererrun"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRun")),"."),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre"},"export declare type BettererRuns = ReadonlyArray<BettererRun>;\n")),Object(b.b)("h2",{id:"bettererrunnames"},Object(b.b)("inlineCode",{parentName:"h2"},"BettererRunNames")),Object(b.b)("p",null,"A list of run names."),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererRunNames = Array<string>;\n")),Object(b.b)("h2",{id:"betterersummary"},Object(b.b)("inlineCode",{parentName:"h2"},"BettererSummary")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererSummary = {\n  readonly runs: BettererRuns;\n  readonly result: string;\n  readonly expected: string | null;\n  readonly unexpectedDiff: boolean;\n  readonly better: BettererRuns;\n  readonly completed: BettererRuns;\n  readonly expired: BettererRuns;\n  readonly failed: BettererRuns;\n  readonly new: BettererRuns;\n  readonly obsolete: BettererRuns;\n  readonly ran: BettererRuns;\n  readonly same: BettererRuns;\n  readonly skipped: BettererRuns;\n  readonly updated: BettererRuns;\n  readonly worse: BettererRuns;\n};\n")),Object(b.b)("h3",{id:"properties-3"},"Properties"),Object(b.b)("h4",{id:"runs-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"runs"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of all runs.")),Object(b.b)("h4",{id:"result-string"},Object(b.b)("inlineCode",{parentName:"h4"},"result"),": ",Object(b.b)("inlineCode",{parentName:"h4"},"string")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The serialised run results.")),Object(b.b)("h4",{id:"expected-string--null"},Object(b.b)("inlineCode",{parentName:"h4"},"expected"),": ",Object(b.b)("inlineCode",{parentName:"h4"},"string | null")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The serialised expected results. Will be ",Object(b.b)("inlineCode",{parentName:"p"},"null")," if it is the first time running ",Object(b.b)("strong",{parentName:"p"},"Betterer"),".")),Object(b.b)("h4",{id:"unexpecteddiff-boolean"},Object(b.b)("inlineCode",{parentName:"h4"},"unexpectedDiff"),": ",Object(b.b)("inlineCode",{parentName:"h4"},"boolean")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Will be ",Object(b.b)("inlineCode",{parentName:"p"},"true")," if running in ",Object(b.b)("a",{parentName:"p",href:"./running-betterer#ci-mode-run-your-tests-and-throw-on-changes"},"CI mode")," and ",Object(b.b)("inlineCode",{parentName:"p"},"result")," is not equal to ",Object(b.b)("inlineCode",{parentName:"p"},"expected"))),Object(b.b)("h3",{id:"state-1"},"State"),Object(b.b)("h4",{id:"better-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"better"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of runs that got better.")),Object(b.b)("h4",{id:"completed-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"completed"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of runs that met their goals.")),Object(b.b)("h4",{id:"expired-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"expired"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of runs that passed their deadlines.")),Object(b.b)("h4",{id:"failed-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"failed"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of runs that threw errors.")),Object(b.b)("h4",{id:"new-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"new"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of runs that ran for the first time.")),Object(b.b)("h4",{id:"obsolete-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"obsolete"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of runs that weren't run but still have a saved result.")),Object(b.b)("h4",{id:"ran-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"ran"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of runs that were run (not failed, obsolete, or skipped).")),Object(b.b)("h4",{id:"same-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"same"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of runs that stayed the same.")),Object(b.b)("h4",{id:"skipped-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"skipped"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of runs that were skipped.")),Object(b.b)("h4",{id:"updated-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"updated"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of runs that got worse, but were force updated.")),Object(b.b)("h4",{id:"worse-bettererruns"},Object(b.b)("inlineCode",{parentName:"h4"},"worse"),": ",Object(b.b)("a",{parentName:"h4",href:"#bettererruns"},Object(b.b)("inlineCode",{parentName:"a"},"BettererRuns"))),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"The list of runs that got worse.")),Object(b.b)("h2",{id:"betterersummaries"},Object(b.b)("inlineCode",{parentName:"h2"},"BettererSummaries")),Object(b.b)("p",null,"A list of ",Object(b.b)("a",{parentName:"p",href:"#betterersummary"},Object(b.b)("inlineCode",{parentName:"a"},"BettererSummary")),"."),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererSummaries = Array<BettererSummary>;\n")))}s.isMDXComponent=!0}}]);