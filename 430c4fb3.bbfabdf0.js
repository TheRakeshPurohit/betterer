(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{115:function(e,t,r){"use strict";r.d(t,"a",(function(){return o})),r.d(t,"b",(function(){return O}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function b(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=a.a.createContext({}),c=function(e){var t=a.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):b(b({},t),e)),r},o=function(e){var t=c(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),o=c(r),u=n,O=o["".concat(l,".").concat(u)]||o[u]||d[u]||i;return r?a.a.createElement(O,b(b({ref:t},p),{},{components:r})):a.a.createElement(O,b({ref:t},p))}));function O(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=u;var b={};for(var s in t)hasOwnProperty.call(t,s)&&(b[s]=t[s]);b.originalType=e,b.mdxType="string"==typeof e?e:n,l[1]=b;for(var p=2;p<i;p++)l[p]=r[p];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},86:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return l})),r.d(t,"metadata",(function(){return b})),r.d(t,"toc",(function(){return s})),r.d(t,"default",(function(){return c}));var n=r(3),a=r(7),i=(r(0),r(115)),l={id:"betterer-test",title:"Betterer Test",description:"Betterer Test API reference",slug:"/betterer-test"},b={unversionedId:"api/betterer-test",id:"api/betterer-test",isDocsHomePage:!1,title:"Betterer Test",description:"Betterer Test API reference",source:"@site/docs/api/test.md",slug:"/betterer-test",permalink:"/betterer/docs/betterer-test",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/test.md",version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1614384440,sidebar:"api",previous:{title:"Betterer Runner",permalink:"/betterer/docs/runner"},next:{title:"Betterer File Test",permalink:"/betterer/docs/betterer-file-test"}},s=[{value:"<code>BettererTestOptions</code>",id:"betterertestoptions",children:[{value:"Generics",id:"generics",children:[]}]},{value:"<code>BettererTestOptionsBasic</code>",id:"betterertestoptionsbasic",children:[{value:"Properties",id:"properties",children:[]}]},{value:"<code>BettererTestOptionsComplex</code>",id:"betterertestoptionscomplex",children:[{value:"Properties",id:"properties-1",children:[]}]},{value:"<code>BettererTest</code>",id:"betterertest",children:[{value:"Constructor",id:"constructor",children:[]},{value:"Properties",id:"properties-2",children:[]},{value:"Methods",id:"methods",children:[]},{value:"<code>only()</code>",id:"only",children:[]},{value:"<code>skip()</code>",id:"skip",children:[]}]},{value:"<code>BettererTestConfig</code>",id:"betterertestconfig",children:[]},{value:"<code>BettererTestConstraint</code>",id:"betterertestconstraint",children:[]},{value:"<code>BettererTestFunction</code>",id:"betterertestfunction",children:[]},{value:"<code>BettererTestGoal</code>",id:"betterertestgoal",children:[]},{value:"<code>BettererDiffer</code>",id:"bettererdiffer",children:[]},{value:"<code>BettererDiff</code>",id:"bettererdiff",children:[{value:"Properties",id:"properties-3",children:[]},{value:"Methods",id:"methods-1",children:[]},{value:"<code>log()</code>",id:"log",children:[]}]},{value:"<code>BettererSerialiser</code>",id:"bettererserialiser",children:[]},{value:"<code>BettererSerialise</code>",id:"bettererserialise",children:[]},{value:"<code>BettererDeserialise</code>",id:"bettererdeserialise",children:[]},{value:"<code>BettererPrinter</code>",id:"bettererprinter",children:[]},{value:"<code>BettererProgress</code>",id:"bettererprogress",children:[]}],p={toc:s};function c(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"betterertestoptions"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererTestOptions")),Object(i.b)("p",null,"Whenever you create a ",Object(i.b)("a",{parentName:"p",href:"#betterertest"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTest"))," you can pass an options object. It will be validated by and turned into a ",Object(i.b)("a",{parentName:"p",href:"#betterertestconfig"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTestConfig")),"."),Object(i.b)("p",null,"There is a lot of power (and therefore complexity) in this options object. The types should hopefully guide you towards a useful test, but feel free to reach out if you need help!"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestOptions<DeserialisedType = unknown, SerialisedType = DeserialisedType, DiffType = null> =\n  | BettererTestOptionsBasic\n  | BettererTestOptionsComplex<DeserialisedType, SerialisedType, DiffType>;\n")),Object(i.b)("h3",{id:"generics"},"Generics"),Object(i.b)("h4",{id:"deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"h4"},"DeserialisedType")," (default ",Object(i.b)("inlineCode",{parentName:"h4"},"unknown"),")"),Object(i.b)("p",null,"This type describes the basic result type of a test. For simple tests this can just be a ",Object(i.b)("inlineCode",{parentName:"p"},"number")," or other primitive. More complex types can be used, but will possibly require implementing ",Object(i.b)("a",{parentName:"p",href:"#bettererdiffer"},Object(i.b)("inlineCode",{parentName:"a"},"differ")),", ",Object(i.b)("a",{parentName:"p",href:"#bettererserialiser"},Object(i.b)("inlineCode",{parentName:"a"},"serialiser")),", and ",Object(i.b)("a",{parentName:"p",href:"#bettererprinter"},Object(i.b)("inlineCode",{parentName:"a"},"printer")),"."),Object(i.b)("h4",{id:"serialisedtype-default-deserialisedtype"},Object(i.b)("inlineCode",{parentName:"h4"},"SerialisedType")," (default ",Object(i.b)("inlineCode",{parentName:"h4"},"DeserialisedType"),")"),Object(i.b)("p",null,"This type describes the serialised type of a test result. Some complex result types (like ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test#bettererfiletestresult"},Object(i.b)("inlineCode",{parentName:"a"},"BettererFileTestResult")),") cannot be directly serialised to JSON, so it must be converted to a serailisable form."),Object(i.b)("h4",{id:"difftype-default-null"},Object(i.b)("inlineCode",{parentName:"h4"},"DiffType")," (default ",Object(i.b)("inlineCode",{parentName:"h4"},"null"),")"),Object(i.b)("p",null,"This type describes the diff between two results. Some complex result types (like ",Object(i.b)("a",{parentName:"p",href:"./betterer-file-test#bettererfiletestresult"},Object(i.b)("inlineCode",{parentName:"a"},"BettererFileTestResult")),") cannot be compared directly, so a diff can be constructed to better express the comparison."),Object(i.b)("h2",{id:"betterertestoptionsbasic"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererTestOptionsBasic")),Object(i.b)("p",null,"The least complex version of a ",Object(i.b)("a",{parentName:"p",href:"#betterertest"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTest"))," operates on simple numbers and can be defined with just a few properties."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestOptionsBasic = {\n  constraint: BettererTestConstraint<number>;\n  test: BettererTestFunction<number>;\n  goal?: BettererTestGoal<number> | number;\n  deadline?: Date | string;\n};\n")),Object(i.b)("h3",{id:"properties"},"Properties"),Object(i.b)("h4",{id:"constraint-betterertestconstraint"},Object(i.b)("inlineCode",{parentName:"h4"},"constraint"),": ",Object(i.b)("a",{parentName:"h4",href:"#betterertestconstraint"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTestConstraint"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The constraint function for the test.")),Object(i.b)("h4",{id:"test-betterertestfunction"},Object(i.b)("inlineCode",{parentName:"h4"},"test"),": ",Object(i.b)("a",{parentName:"h4",href:"#betterertestfunction"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTestFunction"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The function that runs the actual test.")),Object(i.b)("h4",{id:"goal-betterertestgoal--number"},Object(i.b)("inlineCode",{parentName:"h4"},"goal"),": ",Object(i.b)("a",{parentName:"h4",href:"#betterertestgoal"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTestGoal"))," | ",Object(i.b)("inlineCode",{parentName:"h4"},"number")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The goal function or value for the test.")),Object(i.b)("h4",{id:"deadline-date--string"},Object(i.b)("inlineCode",{parentName:"h4"},"deadline"),": ",Object(i.b)("inlineCode",{parentName:"h4"},"Date")," | ",Object(i.b)("inlineCode",{parentName:"h4"},"string")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The deadline for the test.")),Object(i.b)("h2",{id:"betterertestoptionscomplex"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererTestOptionsComplex")),Object(i.b)("p",null,"For a more complex version ",Object(i.b)("a",{parentName:"p",href:"#betterertest"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTest"))," that operates on more complex objects, you may need to define more copmlex behaviour."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestOptionsComplex<DeserialisedType, SerialisedType, DiffType> = {\n  constraint: BettererTestConstraint<DeserialisedType>;\n  test: BettererTestFunction<DeserialisedType>;\n  differ: BettererDiffer<DeserialisedType, DiffType>;\n  printer?: BettererPrinter<SerialisedType>;\n  progress?: BettererProgress<DeserialisedType>;\n  serialiser: BettererSerialiser<DeserialisedType, SerialisedType>;\n  goal: BettererTestGoal<DeserialisedType> | DeserialisedType;\n  deadline?: Date | string;\n};\n")),Object(i.b)("h3",{id:"properties-1"},"Properties"),Object(i.b)("h4",{id:"constraint-betterertestconstraint-1"},Object(i.b)("inlineCode",{parentName:"h4"},"constraint"),": ",Object(i.b)("a",{parentName:"h4",href:"#betterertestconstraint"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTestConstraint"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The constraint function for the test.")),Object(i.b)("h4",{id:"test-betterertestfunction-1"},Object(i.b)("inlineCode",{parentName:"h4"},"test"),": ",Object(i.b)("a",{parentName:"h4",href:"#betterertestfunction"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTestFunction"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The function that runs the actual test.")),Object(i.b)("h4",{id:"differ-bettererdiffer"},Object(i.b)("inlineCode",{parentName:"h4"},"differ"),": ",Object(i.b)("a",{parentName:"h4",href:"#bettererdiffer"},Object(i.b)("inlineCode",{parentName:"a"},"BettererDiffer"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The function that compares two test results.")),Object(i.b)("h4",{id:"printer-bettererprinter"},Object(i.b)("inlineCode",{parentName:"h4"},"printer"),": ",Object(i.b)("a",{parentName:"h4",href:"#bettererprinter"},Object(i.b)("inlineCode",{parentName:"a"},"BettererPrinter"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The function that converts a serialised test result to the string that will be saved in the ",Object(i.b)("a",{parentName:"p",href:"./results-file"},"test results file"))),Object(i.b)("h4",{id:"progress-bettererprogress"},Object(i.b)("inlineCode",{parentName:"h4"},"progress"),": ",Object(i.b)("a",{parentName:"h4",href:"#bettererprogress"},Object(i.b)("inlineCode",{parentName:"a"},"BettererProgress"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The function that converts a test result to a number value that represents the progress towards the goal.")),Object(i.b)("h4",{id:"serialiser-bettererserialiser"},Object(i.b)("inlineCode",{parentName:"h4"},"serialiser"),": ",Object(i.b)("a",{parentName:"h4",href:"#bettererserialiser"},Object(i.b)("inlineCode",{parentName:"a"},"BettererSerialiser"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The functions that serialises and deserialises a test result between the ",Object(i.b)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))," and ",Object(i.b)("a",{parentName:"p",href:"#serialisedtype-default-deserialisedtype"},Object(i.b)("inlineCode",{parentName:"a"},"SerialisedType")),".")),Object(i.b)("h4",{id:"goal-betterertestgoal--number-1"},Object(i.b)("inlineCode",{parentName:"h4"},"goal"),": ",Object(i.b)("a",{parentName:"h4",href:"#betterertestgoal"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTestGoal"))," | ",Object(i.b)("inlineCode",{parentName:"h4"},"number")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The goal function or value for the test.")),Object(i.b)("h4",{id:"deadline-date--string-1"},Object(i.b)("inlineCode",{parentName:"h4"},"deadline"),": ",Object(i.b)("inlineCode",{parentName:"h4"},"Date")," | ",Object(i.b)("inlineCode",{parentName:"h4"},"string")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The deadline for the test.")),Object(i.b)("h2",{id:"betterertest"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererTest")),Object(i.b)("p",null,"The interface to the ",Object(i.b)("strong",{parentName:"p"},"Betterer")," ",Object(i.b)("a",{parentName:"p",href:"./tests"},"test system"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"class BettererTest {\n  get config(): BettererTestConfig;\n  get isOnly(): boolean;\n  get isSkipped(): boolean;\n  constructor(options: BettererTestOptions);\n  only(): this;\n  skip(): this;\n}\n")),Object(i.b)("h3",{id:"constructor"},"Constructor"),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"options"),": ",Object(i.b)("a",{parentName:"li",href:"#betterertestoptions"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTestOptions")))),Object(i.b)("h4",{id:"usage"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { BettererTest } from '@betterer/betterer';\n\nconst test = new BettererTest({ ... });\n")),Object(i.b)("h3",{id:"properties-2"},"Properties"),Object(i.b)("h4",{id:"config-betterertestconfig"},Object(i.b)("inlineCode",{parentName:"h4"},"config"),": ",Object(i.b)("a",{parentName:"h4",href:"#betterertestconfig"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTestConfig"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The complete configuration for the test.")),Object(i.b)("h4",{id:"isonly-boolean"},Object(i.b)("inlineCode",{parentName:"h4"},"isOnly"),": ",Object(i.b)("inlineCode",{parentName:"h4"},"boolean")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Calling ",Object(i.b)("inlineCode",{parentName:"p"},"only()")," will mark this as ",Object(i.b)("inlineCode",{parentName:"p"},"true"),". If this is ",Object(i.b)("inlineCode",{parentName:"p"},"true")," all other tests will be skipped.")),Object(i.b)("h4",{id:"isskipped-boolean"},Object(i.b)("inlineCode",{parentName:"h4"},"isSkipped"),": ",Object(i.b)("inlineCode",{parentName:"h4"},"boolean")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Calling ",Object(i.b)("inlineCode",{parentName:"p"},"skip()")," will mark this as ",Object(i.b)("inlineCode",{parentName:"p"},"true"),". If this is ",Object(i.b)("inlineCode",{parentName:"p"},"true")," this test will be skipped.")),Object(i.b)("h3",{id:"methods"},"Methods"),Object(i.b)("h3",{id:"only"},Object(i.b)("inlineCode",{parentName:"h3"},"only()")),Object(i.b)("p",null,"Run only this test. All other tests will be marked as skipped."),Object(i.b)("p",null,"Returns: ",Object(i.b)("a",{parentName:"p",href:"#betterertest"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTest"))),Object(i.b)("h3",{id:"skip"},Object(i.b)("inlineCode",{parentName:"h3"},"skip()")),Object(i.b)("p",null,"Skip this test."),Object(i.b)("p",null,"Returns: ",Object(i.b)("a",{parentName:"p",href:"#betterertest"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTest"))),Object(i.b)("h2",{id:"betterertestconfig"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererTestConfig")),Object(i.b)("p",null,"The validated configuration for a ",Object(i.b)("a",{parentName:"p",href:"#betterertest"},Object(i.b)("inlineCode",{parentName:"a"},"BettererTest"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestConfig<DeserialisedType, SerialisedType, DiffType> = {\n  constraint: BettererTestConstraint<DeserialisedType>;\n  deadline: number;\n  goal: BettererTestGoal<DeserialisedType>;\n  test: BettererTestFunction<DeserialisedType>;\n  differ: BettererDiffer<DeserialisedType, DiffType>;\n  printer: BettererPrinter<SerialisedType>;\n  progress: BettererProgress<DeserialisedType> | null;\n  serialiser: BettererSerialiser<DeserialisedType, SerialisedType>;\n  type: BettererTestType;\n};\n")),Object(i.b)("h2",{id:"betterertestconstraint"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererTestConstraint")),Object(i.b)("p",null,"A function that checks if a test result is ",Object(i.b)("a",{parentName:"p",href:"./constraints#bettererconstraintresult"},Object(i.b)("inlineCode",{parentName:"a"},"better"),", ",Object(i.b)("inlineCode",{parentName:"a"},"worse"),", or the ",Object(i.b)("inlineCode",{parentName:"a"},"same")),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestConstraint<DeserialisedType> = (\n  result: DeserialisedType,\n  expected: DeserialisedType\n) => Promise<BettererConstraintResult> | BettererConstraintResult;\n")),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"result"),": ",Object(i.b)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))," - Result from the current test run."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"expected"),": ",Object(i.b)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))," - Expected result from the results file.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("a",{parentName:"p",href:"./constraints#bettererconstraintresult"},Object(i.b)("inlineCode",{parentName:"a"},"Promise<BettererConstraintResult>"))," | ",Object(i.b)("a",{parentName:"p",href:"./constraints#bettererconstraintresult"},Object(i.b)("inlineCode",{parentName:"a"},"BettererConstraintResult"))),Object(i.b)("h2",{id:"betterertestfunction"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererTestFunction")),Object(i.b)("p",null,"A function that runs the actual test."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestFunction<DeserialisedType> = (run: BettererRun) => Promise<DeserialisedType> | DeserialisedType;\n")),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"run"),": ",Object(i.b)("a",{parentName:"li",href:"./context#bettererrun"},Object(i.b)("inlineCode",{parentName:"a"},"BettererRun"))," - The current run.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"Promise<DeserialisedType>"))," | ",Object(i.b)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))),Object(i.b)("h2",{id:"betterertestgoal"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererTestGoal")),Object(i.b)("p",null,"A function that returns whether the test has met its goal."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererTestGoal<DeserialisedType> = (result: DeserialisedType) => Promise<boolean> | boolean;\n")),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"result"),": ",Object(i.b)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))," - The current result.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("inlineCode",{parentName:"p"},"Promise<boolean>")," | ",Object(i.b)("inlineCode",{parentName:"p"},"boolean")),Object(i.b)("h2",{id:"bettererdiffer"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererDiffer")),Object(i.b)("p",null,"A function that compares two test results."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererDiffer<DeserialisedType, DiffType> = (\n  expected: DeserialisedType,\n  result: DeserialisedType\n) => BettererDiff<DeserialisedType, DiffType>;\n")),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"expected"),": ",Object(i.b)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))," - The expected result."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"result"),": ",Object(i.b)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))," - The current result.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("inlineCode",{parentName:"p"},"BettererDiff<DeserialisedType, DiffType>")),Object(i.b)("h2",{id:"bettererdiff"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererDiff")),Object(i.b)("p",null,"A object that describes the diff between two results."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererDiff<DeserialisedType = unknown, DiffType = null> = {\n  expected: DeserialisedType;\n  result: DeserialisedType;\n  diff: DiffType;\n  log: (logger: BettererLogger) => Promise<void>;\n};\n")),Object(i.b)("h3",{id:"properties-3"},"Properties"),Object(i.b)("h4",{id:"expected-deserialisedtype"},Object(i.b)("inlineCode",{parentName:"h4"},"expected"),": ",Object(i.b)("a",{parentName:"h4",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The expected result.")),Object(i.b)("h4",{id:"result-deserialisedtype"},Object(i.b)("inlineCode",{parentName:"h4"},"result"),": ",Object(i.b)("a",{parentName:"h4",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The current result.")),Object(i.b)("h4",{id:"diff-difftype"},Object(i.b)("inlineCode",{parentName:"h4"},"diff"),": ",Object(i.b)("a",{parentName:"h4",href:"#difftype-default-null"},Object(i.b)("inlineCode",{parentName:"a"},"DiffType"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The difference between ",Object(i.b)("inlineCode",{parentName:"p"},"expected")," and ",Object(i.b)("inlineCode",{parentName:"p"},"result"),".")),Object(i.b)("h3",{id:"methods-1"},"Methods"),Object(i.b)("h3",{id:"log"},Object(i.b)("inlineCode",{parentName:"h3"},"log()")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"A logging hook for the diff. This is called by the reporter whenever a test becomes worse.")),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"logger"),": ",Object(i.b)("a",{parentName:"li",href:"./logger#bettererlogger"},Object(i.b)("inlineCode",{parentName:"a"},"BettererLogger"))," - The reporter logger.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("inlineCode",{parentName:"p"},"Promise<void>")),Object(i.b)("h2",{id:"bettererserialiser"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererSerialiser")),Object(i.b)("p",null,"The functions that serialises and deserialises a test result between the ",Object(i.b)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))," and ",Object(i.b)("a",{parentName:"p",href:"#serialisedtype-default-deserialisedtype"},Object(i.b)("inlineCode",{parentName:"a"},"SerialisedType")),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererSerialiser<DeserialisedType, SerialisedType = DeserialisedType> = {\n  serialise: BettererSerialise<DeserialisedType, SerialisedType>;\n  deserialise: BettererDeserialise<DeserialisedType, SerialisedType>;\n};\n")),Object(i.b)("h2",{id:"bettererserialise"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererSerialise")),Object(i.b)("p",null,"The functions that coverts from a ",Object(i.b)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))," to a ",Object(i.b)("a",{parentName:"p",href:"#serialisedtype-default-deserialisedtype"},Object(i.b)("inlineCode",{parentName:"a"},"SerialisedType")),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererSerialise<DeserialisedType, SerialisedType> = (result: DeserialisedType) => SerialisedType;\n")),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"result"),": ",Object(i.b)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))," - The deserialised result.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("a",{parentName:"p",href:"#serialisedtype-default-deserialisedtype"},Object(i.b)("inlineCode",{parentName:"a"},"SerialisedType"))),Object(i.b)("h2",{id:"bettererdeserialise"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererDeserialise")),Object(i.b)("p",null,"The functions that coverts from a ",Object(i.b)("a",{parentName:"p",href:"#serialisedtype-default-deserialisedtype"},Object(i.b)("inlineCode",{parentName:"a"},"SerialisedType"))," to a ",Object(i.b)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType")),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererDeserialise<DeserialisedType, SerialisedType> = (serialised: SerialisedType) => DeserialisedType;\n")),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"serialised"),": ",Object(i.b)("a",{parentName:"li",href:"#serialisedtype-default-deserialisedtype"},Object(i.b)("inlineCode",{parentName:"a"},"SerialisedType"))," - The serialised result.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("a",{parentName:"p",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))),Object(i.b)("h2",{id:"bettererprinter"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererPrinter")),Object(i.b)("p",null,"A function that converts a serialised test result to the string that will be saved in the ",Object(i.b)("a",{parentName:"p",href:"./results-file"},"test results file"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererPrinter<SerialisedType> = (serialised: SerialisedType) => MaybeAsync<string>;\n")),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"serialised"),": ",Object(i.b)("a",{parentName:"li",href:"#serialisedtype-default-deserialisedtype"},Object(i.b)("inlineCode",{parentName:"a"},"SerialisedType"))," - The serialised result.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("inlineCode",{parentName:"p"},"Promise<string>")," | ",Object(i.b)("inlineCode",{parentName:"p"},"string")),Object(i.b)("h2",{id:"bettererprogress"},Object(i.b)("inlineCode",{parentName:"h2"},"BettererProgress")),Object(i.b)("p",null,"A function that converts a test result to a number value that represents the progress towards the goal."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type BettererProgress<DeserialisedType> = (\n  baseline: DeserialisedType | null,\n  result: DeserialisedType | null\n) => MaybeAsync<BettererDelta | null>;\n")),Object(i.b)("p",null,"Args:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"baseline"),": ",Object(i.b)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))," | ",Object(i.b)("inlineCode",{parentName:"li"},"null")," - The baseline result."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"result"),": ",Object(i.b)("a",{parentName:"li",href:"#deserialisedtype-default-unknown"},Object(i.b)("inlineCode",{parentName:"a"},"DeserialisedType"))," | ",Object(i.b)("inlineCode",{parentName:"li"},"null")," - The current result.")),Object(i.b)("p",null,"Returns: ",Object(i.b)("a",{parentName:"p",href:"#bettererdelta"},Object(i.b)("inlineCode",{parentName:"a"},"Promise<BettererDelta>"))," | ",Object(i.b)("inlineCode",{parentName:"p"},"Promise<null>")," | ",Object(i.b)("a",{parentName:"p",href:"#bettererdelta"},Object(i.b)("inlineCode",{parentName:"a"},"BettererDelta"))," | ",Object(i.b)("inlineCode",{parentName:"p"},"null")))}c.isMDXComponent=!0}}]);